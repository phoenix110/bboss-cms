<?xml version="1.0" encoding="UTF-8"?>
<manager-config>

	<!-- 
		是否是kettle完全版本 
		默认为：false
		false：精简版
		true：完整版
	-->
	<property name="kettle.retail" value="true" />
	
	<!--  
		客户端证书下载目录
		代码获取该值：
		com.frameworkset.platform.mq.MQUtil.CLIENT_CA_DOWNLOAD_DIR
	-->
	<property name="client.ca.download.dir" value="d:/ca/client" />

	<!-- 
		实现mq服务器远程监控服务，采用单列模式
	 -->
	<property name="mq.monitorserivce" singlable="true" class="com.frameworkset.platform.mq.rpc.RPCMonitorImpl" />
	<!--  
		服务配置管理远程调用
	-->
	<property name="mq.brokerservice" singlable="true" class="com.frameworkset.platform.mq.rpc.BrokerManagerImpl" />
	<!-- 
		mq服务器，客服端节点监控信息采集服务
	 -->
	<property name="mq.staticserivce" singlable="true" class="com.frameworkset.platform.mq.rpc.StatisticServiceImpl" />	
	<!-- 
		rpc服务器管理配置，采用单列模式
	-->
	<property name="mq.rpcmanagerservice" singlable="true"	class="com.frameworkset.platform.mq.rpc.RPCManagerImpl" />

	<!-- 
		MQ节点管理服务
	 -->
	<property name="client.MqNodeService" singlable="true" class="com.frameworkset.platform.mq.client.MqNodeService" >
		<transactions>
			<!-- 
				定义需要进行事务控制的方法
				属性说明：
				name-方法名称，可以是一个正则表达式，正则表达式的语法请参考jakarta-oro的相关文档，如果使用
				正则表达式的情况时，则方法中声明的方法参数将被忽略，但是回滚异常有效。
				pattern-方法名称的正则表达式匹配模式，模式匹配的顺序受配置位置的影响，如果配置在后面或者中间，
						那么会先执行之前的方法匹配，如果匹配上了就不会对该模式方法进行匹配了，否则执行匹配操作。
						如果匹配上特定的方法名称，那么这个方法就是需要进行事务控制的方法
						例如：模式testInt.*匹配接口中以testInt开头的任何方法
				txtype-需要控制的事务类型，取值范围：
				NEW_TRANSACTION，
				REQUIRED_TRANSACTION，
				MAYBE_TRANSACTION，
				NO_TRANSACTION
			-->
			
			<!-- 			    
					定义使事务回滚的异常,如果没有明确声明需要回滚事务的异常，那么当有异常发生时，事务管理框架将自动回滚当前事务
					class-异常的完整类路径
					type-是否检测类型异常的子类控制标识，
					IMPLEMENTS只检测异常类本身，忽略异常类的子类；
					INSTANCEOF检查异常类本省及其所有子类
					
			-->
			<method name="insertConParams">
				<param type="int"/>
				<param type="java.util.List"/>
			</method>
			
			<method name="initInsertConParams">
				<param type="int"/>
			</method>
			
			<method name="addNode">
				<param type="com.frameworkset.platform.mq.client.MqNode"/>
			</method>
			
			<method name="deleteNode">
				<param type="java.lang.String"/>
			</method>
			
			<method name="deleteNode">
				<param type="java.lang.String"/>
				<param type="boolean"/>
			</method>			
		</transactions>	    
	</property>
	<!-- 
		MQ连接工厂管理服务
	 -->
	<property name="client.MQNodeFactoryManagerImpl" singlable="true" class="com.frameworkset.platform.mq.client.impl.MQNodeFactoryManagerImpl" >
		<transactions>
			<!-- 
				定义需要进行事务控制的方法
				属性说明：
				name-方法名称，可以是一个正则表达式，正则表达式的语法请参考jakarta-oro的相关文档，如果使用
				正则表达式的情况时，则方法中声明的方法参数将被忽略，但是回滚异常有效。
				pattern-方法名称的正则表达式匹配模式，模式匹配的顺序受配置位置的影响，如果配置在后面或者中间，
						那么会先执行之前的方法匹配，如果匹配上了就不会对该模式方法进行匹配了，否则执行匹配操作。
						如果匹配上特定的方法名称，那么这个方法就是需要进行事务控制的方法
						例如：模式testInt.*匹配接口中以testInt开头的任何方法
				txtype-需要控制的事务类型，取值范围：
				NEW_TRANSACTION，
				REQUIRED_TRANSACTION，
				MAYBE_TRANSACTION，
				NO_TRANSACTION
			-->
			
			<!-- 			    
					定义使事务回滚的异常,如果没有明确声明需要回滚事务的异常，那么当有异常发生时，事务管理框架将自动回滚当前事务
					class-异常的完整类路径
					type-是否检测类型异常的子类控制标识，
					IMPLEMENTS只检测异常类本身，忽略异常类的子类；
					INSTANCEOF检查异常类本省及其所有子类
					
			-->
			
			<method name="addMQNodeFactory">
				<param type="com.frameworkset.platform.mq.client.bean.MQNodeFactory"/>
			</method>
			
			<method name="delMQNodeFactory">
				<param type="[Ljava.lang.String;"/>
			</method>		
		</transactions>	    
	</property>	
	<properties>
		<!-- 
			数据交换节点标识：本机mac地址 + 应用id标识
			                 例如mac地址为00-23-54-CF-D1-D7，应用id标识为etl
		 -->
		<property name="machine_identity" value="00-23-54-CF-D1-D7-etl" />
		<!-- 
			客户端的应用上下文地址,例如：http://localhost:8080/cmc
			mq消费端插件和接收端插件中通过本地址进行节点管理，kettle登录用户账号和口令必需和smc和cmc的账号和口令一致
		-->
		<property name="client_contextpath" value="http://192.168.11.102:8088/WebRoot/" />
		<!-- 
			mq断点续传和文件分割时每个数据块的最大尺寸
		 -->
		<property name="mq.block.maxsize" value="1M" />		
		
		<!--  
			消息重发机制配置参数模板
		-->
		<property name="connection.params.redirectPolicy" label="消息重发机制">
			<map>
			<!--  
				private double collisionAvoidanceFactor = 0.15d;//collisionAvoidancePercent
			    private int maximumRedeliveries = 6;
			    private long initialRedeliveryDelay = 1000L;
			    private boolean useCollisionAvoidance;
			    private boolean useExponentialBackOff;
			    private short backOffMultiplier = 5;
    		-->
				<property label="消息冲突百分比" name="collisionAvoidancePercent"
					value="15" class="int">
					<description> <![CDATA[避免消息冲突百分比，默认为15，也就是15%]]></description>
				</property>
				<property label="最大重发次数" name="maximumRedeliveries"
					value="6" class="int">
					<description> <![CDATA[设置为-1时无限重发]]></description>
				</property>
				<property label="重发时间间隔" name="initialRedeliveryDelay"
					value="1000" class="int">
					<description> <![CDATA[毫秒]]></description>
				</property>
				<property label="是否启用冲突避免策略" name="useCollisionAvoidance"
					value="false" class="boolean">
					<description> <![CDATA[]]></description>
				</property>
				<property label="消息重发递增延迟策略" name="useExponentialBackOff"
					value="false" class="boolean">
					<description> <![CDATA[]]></description>
				</property>
				<property label="消息重发递增比例" name="backOffMultiplier"
					value="5" class="int">
					<description> <![CDATA[]]></description>
				</property>
			</map>
		</property>
		<!--  
			故障重连机制配置参数模板
		-->
		<property name="connection.params.reconnectPolicy" label="故障重连机制">
			<map>
    			<property label="是否启用重连机制" name="USE_FAILOVER"
					value="false" class="boolean">
					<description> <![CDATA[]]></description>
				</property>
				<property label="重连时间间隔" name="reconnectPolicy.initialReconnectDelay"
					value="10" class="long">
					<description> <![CDATA[避免消息冲突百分比，默认为15，也就是15%]]></description>
				</property>
				<property label="最大重连时间间隔" name="reconnectPolicy.maxReconnectDelay"
					value="30000" class="long">
					<description> <![CDATA[设置为-1时无限重发]]></description>
				</property>
				<property label="是否启用指数延时机制" name="reconnectPolicy.useExponentialBackOff"
					value="true" class="boolean">
					<description> <![CDATA[毫秒]]></description>
				</property>
				<property label="指数补偿机制中指数值" name="reconnectPolicy.reconnectDelayExponent"
					value="2" class="int">
					<description> <![CDATA[]]></description>
				</property>
				<property label="最大重连次数" name="reconnectPolicy.maxReconnectAttempts"
					value="5" class="int">
					<description> <![CDATA[]]></description>
				</property>
				<property label="是否随机选项URI" name="reconnectPolicy.randomize"
					value="false" class="boolean">
					<description> <![CDATA[]]></description>
				</property>
			</map>
		</property>
		<!-- 
			mq连接工厂的配置参数模板
		 -->
		<property name="connection.params" label="连接参数">
			<!--
				http://activemq.apache.org/maven/activemq-core/xsddoc/http___activemq.org_config_1.0/element/connectionFactory.html
			-->
			<map>
				<property label="alwaysSessionAsync" name="alwaysSessionAsync"
					value="true" class="boolean">
					<description> <![CDATA[If this flag is set then a seperate thread is not used for dispatching messages for each Session in the Connection.
									 However, a separate thread is always used if there is more than one session, 
									or the session isn't in auto acknowledge or dups ok mode]]></description>
				</property>
				<property label="alwaysSyncSend" name="alwaysSyncSend"
					value="false" class="boolean" min="10" max="100">
					<description> <![CDATA[Set true if always require messages to be sync sent  ]]></description>
				</property>
				<property label="closeTimeout(单位：ms)" name="closeTimeout" class="int" value="15000">
					<description> <![CDATA[Sets the timeout before a close is considered complete. ]]></description>
				</property>
				<property label="copyMessageOnSend" class="boolean" name="copyMessageOnSend"
					value="true">
					<description> <![CDATA[Should a JMS message be copied to a new JMS Message object as part of the send() method in JMS.  ]]></description>
				</property>
				<property label="disableTimeStampsByDefault" class="boolean" name="disableTimeStampsByDefault"
					value="false">
					<description> <![CDATA[Sets whether or not timestamps on messages should be disabled or not.]]></description>
				</property>
				<property label="dispatchAsync" class="boolean" name="dispatchAsync" value="true">
					<description> <![CDATA[ Enables or disables the default setting of whether or not consumers have their messages dispatched synchronously or asynchronously by the broker. ]]></description>
				</property>
				<property label="objectMessageSerializationDefered" class="boolean" name="objectMessageSerializationDefered"
					value="false">
					<description> <![CDATA[When an object is set on an ObjectMessage, the JMS spec requires the object to be serialized by that set method. ]]></description>
				</property>
				<property label="optimizeAcknowledge" class="boolean" name="optimizeAcknowledge"
					value="false">
					<description> <![CDATA[ optimizeAcknowledge ]]></description>
				</property>
				<property label="optimizedMessageDispatch" class="boolean" name="optimizedMessageDispatch"
					value="true">
					<description> <![CDATA[ If this flag is set then an larger prefetch limit is used - only applicable for durable topic subscribers. ]]></description>
				</property>
				<property label="producerWindowSize" class="int" name="producerWindowSize"
					value="0">
					<description> <![CDATA[ The ProducerWindowSize is the maximum number of bytes in memory that a producer will transmit to a broker before waiting for acknowledgement messages from the broker that it has accepted the previously sent messages. In other words, this how you configure the producer flow control window that is used for async sends where the client is responsible for managing memory usage. The default value of 0 means no flow control at the client. See also Producer Flow Control. This option only affects Openwire clients as Stomp does not have a means of notifying the clients of accepted messages asynchronously.  ]]></description>
				</property>
				<property label="statsEnabled" class="boolean" name="statsEnabled" value="false">
					<description> <![CDATA[ statsEnabled ]]></description>
				</property>
				<property label="useAsyncSend" class="boolean" name="useAsyncSend" value="false">
					<description> <![CDATA[ Forces the use of Async Sends which adds a massive performance boost; but means that the send() method will return immediately whether the message has been sent or not which could lead to message loss.   ]]></description>
				</property>
				<property label="useCompression" class="boolean" name="useCompression"
					value="false">
					<description> <![CDATA[  Enables the use of compression of the message bodies   ]]></description>
				</property>
				<property label="useRetroactiveConsumer" class="boolean" name="useRetroactiveConsumer"
					value="false">
					<description> <![CDATA[  Sets whether or not retroactive consumers are enabled   ]]></description>
				</property>
				<property label="watchTopicAdvisories" class="boolean" name="watchTopicAdvisories"
					value="true">
					<description> <![CDATA[  Whether to use advisory messages   ]]></description>
				</property>
				<property label="sendTimeout(单位：ms)" class="int" name="sendTimeout" value="0">
					<description> <![CDATA[  Time to wait on Message Sends for a Response, default value of zero indicates to wait forever. Waiting forever allows the broker to have flow control over messages coming from this client if it is a fast producer or there is no consumer such that the broker would run out of memory if it did not slow down the producer. Does not affect Stomp clients as the sends are ack'd by the broker.   ]]></description>
				</property>
				
				<property label="是否使用链接池" class="boolean" name="useConnectionPool" value="false">
					<description> <![CDATA[ true使用，false不使用 ]]></description>
				</property>
			</map>
		</property>
		<!-- 
			mq连接工厂的配置参数模板,参数类型为
		 -->
		<property name="connection.params.prefetchPolicy" paramstype="mq" label="预处理策略" >
			<map>
				<!--
					引用的对象 现不维护
					id="prefetchPolicy" class="org.apache.activemq.ActiveMQPrefetchPolicy" 
					以下配置的属性是org.apache.activemq.ActiveMQPrefetchPolicy该对象的属性配置
				-->
				
				<property label="durableTopicPrefetch" class="int" name="durableTopicPrefetch"
					value="100">
					<description> <![CDATA[  The maximum number of messages sent to a consumer on a durable topic until acknowledgements are received   ]]></description>
				</property>
				<property label="inputStreamPrefetch" class="int" name="inputStreamPrefetch"
					value="100">
					<description> <![CDATA[  The maximum number of messages sent to a consumer on a JMS stream until acknowledgements are received    ]]></description>
				</property>
				<property label="maximumPendingMessageLimit" class="int" name="maximumPendingMessageLimit"
					value="0">
					<description> <![CDATA[  Sets how many messages a broker will keep around, above the prefetch limit, for non-durable topics before starting to discard older messages   ]]></description>
				</property>
				<property label="optimizeDurableTopicPrefetch" class="int" name="optimizeDurableTopicPrefetch"
					value="1000">
					<description> <![CDATA[  optimizeDurableTopicPrefetch  ]]></description>
				</property>
				<property label="queueBrowserPrefetch" class="int" name="queueBrowserPrefetch"
					value="500">
					<description> <![CDATA[  queueBrowserPrefetch]]></description>
				</property>
				<property label="queuePrefetch" class="int" name="queuePrefetch" value="1000">
					<description> <![CDATA[  The maximum number of messages sent to a consumer on a queue until acknowledgements are received ]]></description>
				</property>
				<property label="topicPrefetch" class="int" name="topicPrefetch" value="32766">
					<description> <![CDATA[ The maximum number of messages sent to a consumer on a non-durable topic until acknowledgements are received  ]]></description>
				</property>		
			</map>
		</property>
		
		<!-- 
			集群参数配置模板,作为参数存储到esb_params表中，参数类型为mq.networkconnector.params
		 -->
		<property name="mq.networkconnector.params" paramstype="mq.networkconnector.params">
			<map>
				<!--
					
				-->
				<property label="是否使用集群" class="boolean" name="USE_CLUSTER"
					value="false">
					<description> <![CDATA[ 是否使用集群，默认为false ]]></description>
				</property>
				<property label="集群组播URI" class="String" name="uri"
					value="multicast://232.10.10.102">
					<description> 
					<![CDATA[  The easiest way to configure a network of brokers is via the Xml Configuration. There are two main ways to create a network of brokers
						use a hard coded list of URIs (the networkConnector / networkChannel elements in the activemq.xsd.html ). 
						use Discovery to detect brokers (multicast or rendezvous). 
 						Warning:Order of construction of networks/persistence/transports IS important!]]>
 					</description>
 					<editor class="com.frameworkset.platform.mq.broker.URIEditor"/>
				</property>
				<property label="集群名称" class="String" name="name"
					value="bridge">
					<description> <![CDATA[  name of the network - for more than one network connector between the same two brokers - use different names    ]]></description>
				</property>
				<property label="dynamicOnly" class="boolean" name="dynamicOnly"
					value="false">
					<description> <![CDATA[  if true, only forward messages if a consumer is active on the connected broker     ]]></description>
				</property>
				<property label="decreaseNetworkConsumerPriority" class="boolean" name="decreaseNetworkConsumerPriority"
					value="false">
					<description> <![CDATA[  if true, starting at priority -5, decrease the priority for dispatching to a network Queue consumer the further away it is (in network hops) from the producer. When false all network consumers use same default priority(0) as local consumers    ]]></description>
				</property>
				<property label="networkTTL" class="int" name="networkTTL"
					value="1">
					<description> <![CDATA[  the number of brokers in the network that messages and subscriptions can pass through    ]]></description>
				</property>
				<property label="是否启用负载均衡" class="boolean" name="conduitSubscriptions"
					value="true">
					<description> <![CDATA[  conduitSubscriptions  true  multiple consumers subscribing to the same destination are treated as one consumer by the network  ]]></description>
				</property>
				<property label="excludedDestinations" class="String" name="excludedDestinations" value="">
					<description> <![CDATA[  destinations matching this list won't be forwarded across the network  ,;号分隔
					ActiveMQDestination.QUEUE_QUALIFIED_PREFIX = "queue://";
				    ActiveMQDestination.TOPIC_QUALIFIED_PREFIX = "topic://";
				    ActiveMQDestination.TEMP_QUEUE_QUALIFED_PREFIX = "temp-queue://";
				    ActiveMQDestination.String TEMP_TOPIC_QUALIFED_PREFIX = "temp-topic://";
				    	默认为队列目标，可以在每个目标前面添加目标类型前缀:queue://,topic://,temp-queue://,temp-topic://
					 ]]></description>
					 <editor class="com.frameworkset.platform.mq.broker.DestinctionEditor"/>
				</property>
				<property label="dynamicallyIncludedDestinations" class="String" name="dynamicallyIncludedDestinations" value="">
					<description> <![CDATA[  destinations that match this list will be forwarded across the network n.b. an empty list means all destinations not in the exluded list will be forwarded;号分隔    
					ActiveMQDestination.QUEUE_QUALIFIED_PREFIX = "queue://";
				    ActiveMQDestination.TOPIC_QUALIFIED_PREFIX = "topic://";
				    ActiveMQDestination.TEMP_QUEUE_QUALIFED_PREFIX = "temp-queue://";
				    ActiveMQDestination.String TEMP_TOPIC_QUALIFED_PREFIX = "temp-topic://";
				    	默认为队列目标，可以在每个目标前面添加目标类型前缀:queue://,topic://,temp-queue://,temp-topic://
					]]></description>
					<editor class="com.frameworkset.platform.mq.broker.DestinctionEditor"/>
				</property>
				<property label="staticallyIncludedDestinations" class="String" name="staticallyIncludedDestinations" value="">
					<description> <![CDATA[  staticallyIncludedDestinations  empty  destinations that match will always be passed across the network - even if no consumers have ever registered an interest  ;号分隔   
					ActiveMQDestination.QUEUE_QUALIFIED_PREFIX = "queue://";
				    ActiveMQDestination.TOPIC_QUALIFIED_PREFIX = "topic://";
				    ActiveMQDestination.TEMP_QUEUE_QUALIFED_PREFIX = "temp-queue://";
				    ActiveMQDestination.String TEMP_TOPIC_QUALIFED_PREFIX = "temp-topic://";
				    	默认为队列目标，可以在每个目标前面添加目标类型前缀:queue://,topic://,temp-queue://,temp-topic://
				    	]]></description>
				    <editor class="com.frameworkset.platform.mq.broker.DestinctionEditor"/>
				</property>
				<property label="duplex" class="boolean" name="duplex" value="false">
					<description> <![CDATA[ duplex  false  if true, a network connection will be used to both produce AND Consume messages. This is useful for hub and spoke scenarios when the hub is behind a firewall etc.    ]]></description>
				</property>
				<!-- 		
				<property label="suppressDuplicateQueueSubscriptions" class="boolean" name="suppressDuplicateQueueSubscriptions" value="false">
					<description> <![CDATA[ suppressDuplicateQueueSubscriptions false (from 5.3) if true, duplicate subscriptions in the network that arise from network intermediaries will be suppressed. For example, given brokers A,B and C, networked via multicast discovery. A consumer on A will give rise to a networked consumer on B and C. In addition, C will network to B (based on the network consumer from A) and B will network to C. When true, the network bridges between C and B (being duplicates of their existing network subscriptions to A) will be suppressed. Reducing the routing choices in this way provides determinism when producers or consumers migrate across the network as the potential for dead routes (stuck messages) are eliminated. networkTTL needs to match or exceed the broker count to require this intervention.     ]]></description>
				</property>
				 -->	
			</map>
		</property>
		
		<!-- 
			mq传输中的发送线程池配置
		 -->
		<property name="transfer.threadpool">
			<map>
				<property name="corePoolSize" value="5" />
				<property name="maximumPoolSize" value="10" />
				<!--
					TimeUnit.SECONDS TimeUnit.MICROSECONDS TimeUnit.MILLISECONDS
					TimeUnit.NANOSECONDS 时间单位适用于以下参数： keepAliveTime waitTime
					delayTime（当delayTime为整数时间而不是百分比时有效）
				-->
				<property name="timeUnit" value="TimeUnit.SECONDS" />
				<property name="keepAliveTime" value="20" />
				<!--
					/** * LinkedBlockingQueue * PriorityBlockingQueue *
					ArrayBlockingQueue * SynchronousQueue */
				-->
				<property name="blockingQueueType" value="ArrayBlockingQueue" />
				<property name="blockingQueue" value="5" />
				<!--
					RejectedExecutionHandler
					必须实现java.util.concurrent.RejectedExecutionHandler接口 目前系统提供以下缺省实现：
					org.frameworkset.thread.WaitPolicy
					循环等待event.threadpool.waitTime指定的时间，单位为秒
					org.frameworkset.thread.ThreadPoolExecutor$DiscardPolicy
					直接丢弃任务，不抛出异常 org.frameworkset.thread.ThreadPoolExecutor$AbortPolicy
					直接丢弃任务，抛出异常RejectedExecutionException
					org.frameworkset.thread.ThreadPoolExecutor$CallerRunsPolicy 直接运行
					org.frameworkset.thread.ThreadPoolExecutor$DiscardOldestPolicy
					放入队列，将最老的任务删除 org.frameworkset.thread.RunRejectPolicy
					直接运行，并且通知驱动程序延迟生成执行任务 org.frameworkset.thread.RejectRequeuePoliecy
					重新放入任务堆栈执行任务，通知外部程序放缓任务分发
				-->
				<property name="rejectedExecutionHandler"
					value="org.frameworkset.thread.RejectRequeuePoliecy" />
				<!--
					<property name="rejectedExecutionHandler"
					value="org.frameworkset.thread.ThreadPoolExecutor$CallerRunsPolicy"/>
				-->
				<!--
					以下参数只有在配置的org.frameworkset.thread.WaitPolicy策略时才需要配置
				-->
				<property name="waitTime" value="1" />
				<property name="delayTime" value="20%" />
				<property name="maxWaits" value="-1" />
				<property name="maxdelayTime" value="4" />
				<property name="waitFailHandler"
					value="com.frameworkset.platform.mq.transfer.send.SendBigData$WaiterFailedHandler" />
			</map>
		</property>
		<!-- 
			mq传输中的接收线程池配置
		 -->
		<property name="transfer.receive.threadpool">
			<map>
				<property name="corePoolSize" value="5" />
				<property name="maximumPoolSize" value="10" />
				<!--
					TimeUnit.SECONDS TimeUnit.MICROSECONDS TimeUnit.MILLISECONDS
					TimeUnit.NANOSECONDS 时间单位适用于以下参数： keepAliveTime waitTime
					delayTime（当delayTime为整数时间而不是百分比时有效）
				-->
				<property name="timeUnit" value="TimeUnit.SECONDS" />
				<property name="keepAliveTime" value="40" />
				<!--
					/** * LinkedBlockingQueue * PriorityBlockingQueue *
					ArrayBlockingQueue * SynchronousQueue */
				-->
				<property name="blockingQueueType" value="ArrayBlockingQueue" />
				<property name="blockingQueue" value="5" />
				<!--
					RejectedExecutionHandler
					必须实现java.util.concurrent.RejectedExecutionHandler接口 目前系统提供以下缺省实现：
					org.frameworkset.thread.WaitPolicy
					循环等待event.threadpool.waitTime指定的时间，单位为秒
					org.frameworkset.thread.ThreadPoolExecutor$DiscardPolicy
					直接丢弃任务，不抛出异常 org.frameworkset.thread.ThreadPoolExecutor$AbortPolicy
					直接丢弃任务，抛出异常RejectedExecutionException
					org.frameworkset.thread.ThreadPoolExecutor$CallerRunsPolicy 直接运行
					org.frameworkset.thread.ThreadPoolExecutor$DiscardOldestPolicy
					放入队列，将最老的任务删除 org.frameworkset.thread.RunRejectPolicy
					直接运行，并且通知驱动程序延迟生成执行任务 org.frameworkset.thread.RejectRequeuePoliecy
				-->
				<property name="rejectedExecutionHandler"
					value="org.frameworkset.thread.RejectRequeuePoliecy" />
				<!--
					<property name="rejectedExecutionHandler"
					value="jorg.frameworkset.thread.ThreadPoolExecutor$CallerRunsPolicy"/>
				-->
				<!--
					以下参数只有在配置的org.frameworkset.thread.WaitPolicy策略时才需要配置
				-->
				<property name="waitTime" value="1" />
				<property name="delayTime" value="50%" />
				<property name="maxdelayTime" value="4" />
				<property name="maxWaits" value="-1" />
				<property name="waitFailHandler"
					value="com.frameworkset.platform.mq.transfer.send.SendBigData$WaiterFailedHandler" />
			</map>
		</property>		
		<property name="transfer.send.message.block.size" value="100"/>		
		<property name="transfer.receive.message.block.size" value="100"/>
	</properties>
</manager-config>