/*
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized
 * by MyEclipse Hibernate tool integration.
 *
 * Created Wed Feb 08 15:38:04 CST 2006 by MyEclipse Hibernate Tool.
 */
package com.frameworkset.platform.sysmgrcore.entity;

import java.io.Serializable;

/**
 * A class that represents a row in the td_sm_usergroup table. You can customize
 * the behavior of this class by editing the class, {@link Usergroup()}.
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized *
 * by MyEclipse Hibernate tool integration.
 */
public abstract class AbstractUsergroup implements Serializable {

	/** The simple primary key value. */
	private UsergroupKey id = new UsergroupKey();

	/**
	 * 用户实体
	 */
	private User user = null;

	/**
	 * 组实体
	 */
	private Group group = null;

	/**
	 * @return 返回 group。
	 */
	public Group getGroup() {
		return group;
	}

	/**
	 * @param group
	 *            要设置的 group。
	 */
	public void setGroup(Group group) {
		this.group = group;
		
		    id.setGroupId(group.getGroupId());
	}

	/**
	 * @return 返回 user。
	 */
	public User getUser() {
		return user;
	}

	/**
	 * @param user
	 *            要设置的 user。
	 */
	public void setUser(User user) {
		this.user = user;
		
		if (id.getUserId() == null && user != null)
		    id.setUserId(user.getUserId());
	}

	/**
	 * Simple constructor of AbstractUsergroup instances.
	 */
	public AbstractUsergroup() {
	}

	/**
	 * Constructor of AbstractUsergroup instances given a composite primary
	 * key.
	 * 
	 * @param id
	 */
	public AbstractUsergroup(UsergroupKey id) {
		this.setId(id);
	}

	/**
	 * Return the composite id instance that identifies this object.
	 * 
	 * @return UsergroupKey
	 */
	public UsergroupKey getId() {
		return this.id;
	}

	/**
	 * Set the composite id instance that identifies this object.
	 * 
	 * @param id
	 */
	public void setId(UsergroupKey id) {
		this.id = id;
	}

	/**
	 * Implementation of the equals comparison on the basis of equality of the
	 * primary key values.
	 * 
	 * @param rhs
	 * @return boolean
	 */
	public boolean equals(Object rhs) {
		if (rhs == null)
			return false;
		if (!(rhs instanceof Usergroup))
			return false;
		Usergroup that = (Usergroup) rhs;
		if (this.getId() != null && that.getId() != null) {
			return (this.getId().equals(that.getId()));
		}
		return true;
	}

}