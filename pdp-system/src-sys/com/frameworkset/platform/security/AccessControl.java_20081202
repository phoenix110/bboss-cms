/*****************************************************************************
 *                                                                           *
 *  This file is part of the frameworkset distribution.                      *
 *  Documentation and updates may be get from  biaoping.yin the author of    *
 *  this framework							     							 *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    *
 *                                                                           *
 *  The Original Code is tag. The Initial Developer of the Original          *
 *  Code is biaoping.yin. Portions created by biaoping.yin are Copyright     *
 *  (C) 2004.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  biaoping.yin (yin-bp@163.com)                                            *
 *                                                                           *
 *****************************************************************************/
package com.frameworkset.platform.security;

import java.io.IOException;
import java.security.Principal;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.security.auth.Subject;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.PageContext;

import org.apache.log4j.Logger;

import com.frameworkset.platform.config.ConfigManager;
import com.frameworkset.platform.framework.Framework;
import com.frameworkset.platform.framework.FrameworkServlet;
import com.frameworkset.platform.security.authentication.CheckCallBack;
import com.frameworkset.platform.security.authentication.Credential;
import com.frameworkset.platform.security.authentication.LoginContext;
import com.frameworkset.platform.security.authentication.LoginException;
import com.frameworkset.platform.security.authentication.UsernamePasswordCallbackHandler;
import com.frameworkset.platform.security.authorization.AccessException;
import com.frameworkset.platform.security.authorization.AuthPrincipal;
import com.frameworkset.platform.security.authorization.AuthRole;
import com.frameworkset.platform.security.authorization.AuthUser;
import com.frameworkset.platform.security.authorization.impl.AppSecurityCollaborator;
import com.frameworkset.platform.security.context.AppAccessContext;
import com.frameworkset.platform.security.util.CookieUtil;
import com.frameworkset.platform.spi.SPIException;
import com.frameworkset.platform.sysmgrcore.entity.Group;
import com.frameworkset.platform.sysmgrcore.entity.Log;
import com.frameworkset.platform.sysmgrcore.entity.Organization;
import com.frameworkset.platform.sysmgrcore.entity.Role;
import com.frameworkset.platform.sysmgrcore.entity.User;
import com.frameworkset.platform.sysmgrcore.exception.ManagerException;
import com.frameworkset.platform.sysmgrcore.manager.LogManager;
import com.frameworkset.platform.sysmgrcore.manager.OrgManager;
import com.frameworkset.platform.sysmgrcore.manager.SecurityDatabase;
import com.frameworkset.platform.sysmgrcore.manager.UserManager;
import com.frameworkset.platform.sysmgrcore.manager.db.GroupCacheManager;
import com.frameworkset.platform.sysmgrcore.manager.db.JobManagerImpl;
import com.frameworkset.platform.sysmgrcore.manager.db.OrgAdminCache;
import com.frameworkset.platform.sysmgrcore.manager.db.OrgCacheManager;
import com.frameworkset.platform.sysmgrcore.manager.db.RoleCacheManager;
import com.frameworkset.common.poolman.DBUtil;
import com.frameworkset.common.poolman.PreparedDBUtil;
import com.frameworkset.util.StringUtil;

/**
 * @author biaoping.yin created on 2005-9-29 version 1.0
 */
public class AccessControl {
	private static final Logger log = Logger.getLogger(AccessControl.class);

	// public static final String LOGINCONTEXT_CACHE_KEY = "LOGIN_CONTEXT";

	public static final String REMOTEADDR_CACHE_KEY = "REMOTEADDR_CACHE_KEY";
	
	public static final String MACADDR_CACHE_KEY = "MACADDR_CACHE_KEY";
	
	public static final String MACHINENAME_CACHE_KEY = "MACHINENAME_CACHE_KEY";
	
	public static final String SESSIONID_CACHE_KEY = "SESSIONID_CACHE_KEY";
	public static final String SERVER_IP_KEY = "SERVER_IP_KEY";
	public static final String SERVER_PORT_KEY = "SERVER_PORT_KEY";

	public static final String PRINCIPAL_INDEXS = "PRINCIPAL_INDEXS";

	public static final String PRINCIPALS_COOKIE = "PRINCIPALS_COOKIE";

	public static final String CREDENTIAL_INDEXS = "CREDENTIAL_INDEXS";

	public static final String SUBSYSTEM_ID = "subsystem_id";

	public static final String SUBSYSTEM_COOKIE = "SUBSYSTEM_COOKIE_ID";

	public static final String HEAD_SPLIT = "^@^";

	public static final String PRINCIPAL_SPLIT = "^_^";

	public static final String IDENTITY_SPLIT = "#$#";

	public static final String PRINCIPAL_CREDENTIAL_SPLIT = "^|^";

	public static final String CREDENTIAL_SPLIT = "@|@";

	public static final String CREDENTIAL_ATTRIBUTE_SPLIT = "@^@";

	public static final String ATTRIBUTE_SPLIT = "@~@";

	public static final String VISIBLE_PERMISSION = "visible";

	public static final String UNVISIBLE_PERMISSION = "unvisible";

	/**
	 * 写权限
	 */
	public static final String WRITE_PERMISSION = "write";

	/**
	 * 读权限
	 */
	public static final String READ_PERMISSION = "read";

	/**
	 * 读写权限
	 */
	public static final String READ_WRITE_PERMISSION = "read_write";

	/**
	 * 批量角色授予
	 */
	public static final String BAT_ROLE_ADD_PERMISSION = "batroleadd";

	/**
	 * 批量岗位授予
	 */
	public static final String BAT_JOB_ADD_PERMISSION = "batjobadd";

	/**
	 * 批量加入机构
	 */
	public static final String BAT_ORG_ADD_PERMISSION = "batorgadd";

	/**
	 * 批量资源操作授予
	 */
	public static final String BAT_RES_ADD_PERMISSION = "batresadd";

	/**
	 * 用户排序
	 */
	public static final String SORT_USER_PERMISSION = "sortuser";

	/**
	 * 机构排序
	 */
	public static final String SORT_ORG_PERMISSION = "sortorg";

	/**
	 * 用户调入调出
	 */
	public static final String USER_MOVE_PERMISSION = "usermove";

	/**
	 * 新增权限
	 */
	public static final String ADD_PERMISSION = "create";

	/**
	 * 修改权限
	 */
	public static final String UPDATE_PERMISSION = "edit";

	/**
	 * 删除权限
	 */
	public static final String DELETE_PERMISSION = "delete";

	/**
	 * 送审权限
	 */
	public static final String DELIVER_PERMISSION = "deliver";

	/**
	 * 撤销送审权限
	 */
	public static final String WITHDRAW_DELIVER_PERMISSION = "withdrawdeliver";
	/**
	 * 提交发布权限
	 */
	public static final String SUBPUBLISH_PERMISSION = "subpublish";
	/**
	 * 文档发布
	 */
	public static final String DOCPUBLISH_PERMISSION = "docpublish";
	/**
	 * 归档权限
	 */
	public static final String ARCHIVE_PERMISSION = "archive";
	/**
	 * 转发权限
	 */
	public static final String TRANSMIT_PERMISSION = "transmit";
	/**
	 * 保存版本
	 */
	public static final String ADD_DOCVER_PERMISSION = "addDocVer";
	/**
	 * 版本管理
	 */
	public static final String MANAGE_DOCVER_PERMISSION = "manageDocVer";
	/**
	 * 评论管理
	 */
	public static final String MANAGE_DOCCOMMENT_PERMISSION = "manageDocComment";
	/**
	 * 设置置顶权限
	 */
	public static final String UPARRANGE_PERMISSION = "addArrangeDoc";
	/**
	 * 文档导入权限
	 */
	public static final String IMPORTDOC_PERMISSION = "importDoc";
	/**
	 * 文档导入权限
	 */
	public static final String EXPORTDOC_PERMISSION = "exportDoc";

	/**
	 * 执行权限
	 */
	public static final String EXECUTE_PERMISSION = "execute";

	/**
	 * 回收权限
	 */
	public static final String TRASH_PERMISSION = "trash";

	public static final String AUDIT_PERMISSION = "audit";

	public static final String PUBLISH_CHNLBYINC = "chnlbyinc";

	/***************************************************************************
	 * 站点操作组 /** 站点设置站点流程
	 */
	public static final String SITE_WORKFLOW_PERMISSION = "workflow";
	/**
	 * 站点预览
	 */
	public static final String SITE_VIEW = "siteview";

	/**
	 * 站点上发布右键
	 */
	public static final String SITEPUBLISH_PERMISSION = "sitepublish";

	/**
	 * 站点上完全发布右键
	 */
	public static final String SITEBYALL_PERMISSION = "sitebyall";

	/**
	 * 站点上增量发布右键
	 */
	public static final String SITEBYINC_PERMISSION = "sitebyinc";

	/**
	 * 站点上的站内文档查询
	 */
	public static final String SITE_DOCSEARCH_PERMISSION = "docsearch";

	/**
	 * 站点上的内容管理
	 */
	public static final String SITE_CONTENTMANAGEITEM_PERMISSION = "contentManageItem";

	/**
	 * 站点节点新建频道
	 */
	public static final String CHANNELROOT_ADDCHANNEL_PERMISSION = "create_channel";

	/***************************************************************************
	 * 站点模板操作组
	 * 
	 * /** 站点上的模板管理
	 */
	public static final String SITE_TEMPMANAGER_PERMISSION = "templetmanager";
	/**
	 * 模板管理中的模板视图
	 */
	public static final String SITE_TEMPLATEVIEW_PERMISSION = "templateview";
	/**
	 * 模板视图中的导入按钮
	 */
	public static final String SITE_TEMPLATEVIEWIMP_PERMISSION = "templateviewimp";

	/**
	 * 模板视图中的新增按钮
	 */
	public static final String SITE_TEMPLATEVIEWADD_PERMISSION = "templateviewadd";

	/**
	 * 模板视图中的导出按钮
	 */
	public static final String SITE_TEMPLATEVIEWEXP_PERMISSION = "templateviewexp";

	/**
	 * 模板视图中的删除按钮
	 */
	public static final String SITE_TEMPLATEVIEWDEL_PERMISSION = "templateviewdel";

	/***************************************************************************
	 * 站点文件视图操作组
	 * 
	 * /** 模板管理中的文件视图
	 */
	public static final String SITE_FILEVIEW_PERMISSION = "fileview";
	/**
	 * 文件视图新建文件权限
	 */
	public static final String SITE_TPLCREATORFILE_PERMISSION = "tplcreatorFile";

	/**
	 * 文件视图新建目录权限
	 */
	public static final String SITE_TPLCREATORDIRECTORY_PERMISSION = "tplcreatorDirectory";

	/**
	 * 文件视图删除文件权限
	 */
	public static final String SITE_TPLDELFILE_PERMISSION = "tpldelFile";

	/**
	 * 文件视图上传文件权限
	 */
	public static final String SITE_TPLSENDFILE_PERMISSION = "tplsendFile";

	/**
	 * 文件视图上传压缩包权限
	 */
	public static final String SITE_TPLSENDBAG_PERMISSION = "tplsendBag";

	/***************************************************************************
	 * 频道操作组 频道节点新建频道
	 */
	public static final String CHANNEL_ADDCHANNEL_PERMISSION = "createchannel";

	/**
	 * 改变频道流程
	 */
	public static final String CHANNEL_WORKFLOW_PERMISSION = "chnlworkflow";

	/**
	 * 频道概览图片设置
	 */
	public static final String CHANNEL_INDEXPIC_PERMISSION = "chnlindexpic";

	/**
	 * 频道新增文档
	 */
	public static final String CHANNEL_ADDDOC_PERMISSION = "adddoc";

	/**
	 * 频道修改文档
	 */
	public static final String CHANNEL_UPDATEDOC_PERMISSION = "updatedoc";

	/**
	 * 频道查看文档
	 */
	public static final String CHANNEL_VIEWDOC_PERMISSION = "viewdoc";

	/**
	 * 频道上频道预览右键
	 */
	public static final String CHNL_VIEW = "chnlview";

	/**
	 * 频道上发布右键
	 */
	public static final String CHNLPUBLISH_PERMISSION = "chnlpublish";

	/**
	 * 频道上完全发布右键
	 */
	public static final String CHNLBYALL_PERMISSION = "chnlbyall";

	/**
	 * 频道上增量发布右键
	 */
	public static final String CHNLBYINC_PERMISSION = "chnlbyinc";

	/**
	 * 频道上复制文档右键
	 */
	public static final String COPYDOC_PERMISSION = "copydoc";

	/**
	 * 频道上置顶管理右键
	 */
	public static final String ARRANGE_DOCM = "arrangedocm";

	/**
	 * 频道上引用文档管理右键
	 */
	public static final String CITEDOC_MANAGER = "citedocmanager";

	/**
	 * 频道上扩展字段右键
	 */
	public static final String EXT_FIELD = "extfield";

	/**
	 * 频道上撤消发布右键
	 */
	public static final String WITHDRAWPUBLISH_MANAGER = "withdrawPublish";
	/***************************************************************************
	 * 模板操作组*
	 * 
	 * /** 模板列表导出右键
	 */
	public static final String TEMPLATE_TPLEXP_PERMISSION = "tplexp";

	/**
	 * 模板列表删除右键
	 */
	public static final String TEMPLATE_TPLDEL_PERMISSION = "tpldel";

	/**
	 * 模板列表编辑右键
	 */
	public static final String TEMPLATE_TPLEDIT_PERMISSION = "tpledit";

	/**
	 * 模板列表重新导入右键
	 */
	public static final String TEMPLATE_TPLREIMP_PERMISSION = "tplreimp";

	/**
	 * 完全控制权限
	 */
	public static final String FULL_PERMISSION = "full";

	public static final String COLUMN_RESOURCE = "column";

	public static final String ORGUNIT_RESOURCE = "orgunit";

	public static final String RES_RESOURCE = "resmanager";

	public static final String GROUP_RESOURCE = "group";

	public static final String ROLE_RESOURCE = "role";

	// 数据字典资源
	public static final String DICT_RESOURCE = "dict";

	public static final String JOB_RESOURCE = "job";

	public static final String USER_RESOURCE = "user";

	public static final String SITE_RESOURCE = "site";

	/**
	 * 2007-08-29 ge.tao 站点应用设置
	 */
	public static final String SITE_APP_SET = "siteappset";

	public static final String SITECHANNEL_RESOURCE = "site.channel";

	public static final String SITEDOC_RESOURCE = "site.doc";

	public static final String SITETPL_RESOURCE = "sitetpl";

	public static final String SITEFILE_RESOURCE = "sitefile";

	public static final String CHANNEL_RESOURCE = "channel";

	public static final String CHANNELDOC_RESOURCE = "channeldoc";

	public static final String TEMPLATE_RESOURCE = "template";

	public static final String ADMINISTRATOR_ROLE = "administrator";

	/**
	 * 2007-05-30 添加于郴州 biaoping.yin
	 */
	public static final String MEMBERCHANNEL_RESOURCE = "memberchannel";

	public static final String LOGOUT_REDIRECT = "sysmanager/logoutredirect.jsp";

	/**
	 * 2007-08-29 ge.tao 系统管理 机构管理 编辑机构
	 */
	public static final String EDIT_ORG = "editsuborg";
	/**
	 * 2007-08-29 ge.tao 系统管理 机构管理 删除机构
	 */
	public static final String DELETE_ORG = "deletesuborg";

	/**
	 * 2007-12-03 ge.tao 字典数据项资源 过滤 "可见"和"常用"两种权限
	 */
	public static final String DICTDATA_RESOURCE = "orgTaxcode";

	private Subject subject;

	private Map principalIndexs = null;

	private Map credentialIndexs = null;

	private String moduleName;

	protected Credential credential;

	protected Principal principal;

	protected String roles[];

	private static final ThreadLocal current = new ThreadLocal();

	public String loginPage = "login.jsp";

	public String authorfailedPage = "login.jsp";

	HttpServletRequest request;

	// JspWriter out;

	HttpSession session;
	
	/**
	 * 未知身份的用户对象
	 */
	private static  AccessControl guest ;
	static
	{
		try
		{
			guest = new AccessControl();
			guest.guestlogin();
		}
		catch(Exception e)
		{
			
			e.printStackTrace();
		}
		
	}

	/**
	 * CS和BS单点登录参数
	 */
	public static final String OUTER_USER_ACCOUNT_KEY = "OUT_USER_ACCOUNT_KEY";

	/**
	 * 请对密码采用MD5加密
	 */
	public static final String OUTER_USER_PASSWORD_KEY = "OUTER_USER_PASSWORD_KEY";

	static final OnLineUser onlineUser = new OnLineUser();

	public  static final String SESSIONID_FROMCLIENT_KEY = "SESSIONID_FROMCLIENT_KEY";

	HttpServletResponse response;

	private AccessControl() {

		loginPage = ConfigManager.getInstance().getLoginPage();

		if (loginPage == null || loginPage.trim().equals("")) {
			loginPage = "hnu_main.jsp";
		}
		authorfailedPage = ConfigManager.getInstance().getAuthorfailedDirect();
		moduleName = ConfigManager.getInstance().getModuleName();
	}
	
	

	public static void init(AccessControl instance) {
		current.set(instance);
	}

	public static AccessControl getInstance() {
		return new AccessControl();
	}

	// public static AccessControl getInstance(AccessControl instance) {
	// return new AccessControl(instance);
	// }

	/**
	 * 系统用户登录接口 目前的ssoCookie未加密,将来需实现ssoCookie的加密处理,用户的信息cookie格式：
	 * loginMudleName + #$% + userName 不同身份信息之间以^_^分隔，例如
	 * loginMudleName#$%userName^_^loginMudleName1#$#userName1^|^loginModuleName@|@name1=value1@~@name=value
	 * 属性列表： ssoCookie在登录时创建，将作为令牌在门户中的各应用系统之间传递的，从而实现单点登录。
	 * 当用户关闭浏览器或者退出登录时，ssoCookie自动失效
	 * 
	 * @param pageContext
	 * @param userName
	 * @param password
	 * @param decode
	 *            是否对密码加密
	 * @return
	 */
	public boolean login(HttpServletRequest request,
			HttpServletResponse response, String userName, String password)
			throws AccessException

	{
		return login(request, response, userName, password, true);
	}

	public String getCurrentSystemID() {
		String id = (String) this.session.getAttribute(Framework.SUBSYSTEM);

		return id == null ? "" : id;
	}

	public String getCurrentSystemName() {
		String id = getCurrentSystemID();
		if (id == null)
			return "";
		try {
			return Framework.getInstance(id).getDescription();
		} catch (Exception e) {
			return "";
		}
	}

	/**
	 * 系统用户登录接口 目前的ssoCookie未加密,将来需实现ssoCookie的加密处理,用户的信息cookie格式：
	 * loginMudleName + #$% + userName 不同身份信息之间以^_^分隔，例如
	 * loginMudleName#$%userName^_^loginMudleName1#$#userName1^|^loginModuleName@|@name1=value1@~@name=value
	 * 属性列表： ssoCookie在登录时创建，将作为令牌在门户中的各应用系统之间传递的，从而实现单点登录。
	 * 当用户关闭浏览器或者退出登录时，ssoCookie自动失效
	 * 
	 * 
	 * @param request
	 * @param response
	 * @param userName
	 * @param password
	 * @param enablelog
	 * @return
	 * @throws AccessException
	 */

	public boolean login(HttpServletRequest request,
			HttpServletResponse response, String userName, String password,
			boolean enablelog) throws AccessException

	{
		return login( request,
				 response,  userName,  password,
				 enablelog,null);
		
	}

	/**
	 * 系统用户登录接口 目前的ssoCookie未加密,将来需实现ssoCookie的加密处理,用户的信息cookie格式：
	 * loginMudleName + #$% + userName 不同身份信息之间以^_^分隔，例如
	 * loginMudleName#$%userName^_^loginMudleName1#$#userName1^|^loginModuleName@|@name1=value1@~@name=value
	 * 属性列表： ssoCookie在登录时创建，将作为令牌在门户中的各应用系统之间传递的，从而实现单点登录。
	 * 当用户关闭浏览器或者退出登录时，ssoCookie自动失效
	 * 
	 * 
	 * @param request
	 * @param response
	 * @param userName
	 * @param password
	 * @param enablelog
	 * @return
	 * @throws AccessException
	 */

	public boolean login(HttpServletRequest request,
			HttpServletResponse response, String userName, String password,
			String userType) throws AccessException

	{

		return login(request, response, userName, password,
				new String[] { userType });
	}
	
	

	/**
	 * 系统用户登录接口 目前的ssoCookie未加密,将来需实现ssoCookie的加密处理,用户的信息cookie格式：
	 * loginMudleName + #$% + userName 不同身份信息之间以^_^分隔，例如
	 * loginMudleName#$%userName^_^loginMudleName1#$#userName1^|^loginModuleName@|@name1=value1@~@name=value
	 * 属性列表： ssoCookie在登录时创建，将作为令牌在门户中的各应用系统之间传递的，从而实现单点登录。
	 * 当用户关闭浏览器或者退出登录时，ssoCookie自动失效
	 * 
	 * 
	 * @param request
	 * @param response
	 * @param userName
	 * @param password
	 * @param enablelog
	 * @return
	 * @throws AccessException
	 */

	public boolean login(HttpServletRequest request,
			HttpServletResponse response, String userName, String password,
			String[] userTypes) throws AccessException

	{

		return login( request,
				 response,  userName,  password, true,
				 userTypes);
	}
	
	public static String kickmode = ConfigManager.getInstance().getConfigValue("kickmode", "refuse");
	
	public static boolean enablemutilogin = ConfigManager.getInstance().getConfigBooleanValue("enablemutilogin", true) ;
	public static boolean cluster_session_synchronize = ConfigManager.getInstance().getConfigBooleanValue("cluster.session.synchronize", false);
	
	/**
	 * 系统用户登录接口 目前的ssoCookie未加密,将来需实现ssoCookie的加密处理,用户的信息cookie格式：
	 * loginMudleName + #$% + userName 不同身份信息之间以^_^分隔，例如
	 * loginMudleName#$%userName^_^loginMudleName1#$#userName1^|^loginModuleName@|@name1=value1@~@name=value
	 * 属性列表： ssoCookie在登录时创建，将作为令牌在门户中的各应用系统之间传递的，从而实现单点登录。
	 * 当用户关闭浏览器或者退出登录时，ssoCookie自动失效
	 * 
	 * 
	 * @param request
	 * @param response
	 * @param userName
	 * @param password
	 * @param enablelog
	 * @return
	 * @throws AccessException
	 */

	public boolean login(HttpServletRequest request,
			HttpServletResponse response, String userName, String password,boolean enablelog,
			String[] userTypes) throws AccessException

	{

		
		
		/**
		 * 如果ie session相互干扰时需要给出提示,不允许用户登录
		 */
		session = request.getSession();
		Map temp = (Map)session.getAttribute(PRINCIPAL_INDEXS);
		if(temp != null)
		{
			Principal principal_ = (Principal) temp.get(moduleName);
			throw new AccessException("用户[" + principal_.getName() + "]正在使用系统，等待退出后再登录！");
		}
		
		if ((!enablemutilogin 
				|| cluster_session_synchronize) 
				&& onlineUser.existUser(userName))
		{
			if(kickmode.equalsIgnoreCase("refuse"))
			{
				if(!isAdmin(userName))
					throw new AccessException("用户[" + userName + "]已登陆,登陆情况为：\\n"
							+ onlineUser.getUserLoginInfo(userName)
							+ "，不允许用户同时多次登陆系统。");
			}
		}
		
		UsernamePasswordCallbackHandler callbackHandler = new UsernamePasswordCallbackHandler(
				userName, password,userTypes);

		principalIndexs = new HashMap();
		credentialIndexs = new HashMap();
		
		this.request = request;
		this.response = response;
		try {
			innerlogon(callbackHandler,
					userName,
					 enablelog,true);
			
			return true;
		} catch (LoginException ex) {
			
			throw new AccessException(ex.getMessage());
		}
	}
	
	public String getSessionID()
	{
		return (String)this.session.getAttribute(SESSIONID_CACHE_KEY);
	}
	
	private void guestlogin()
	{
		UsernamePasswordCallbackHandler callbackHandler = new UsernamePasswordCallbackHandler(
				"guest___", "123456",null);
		
		try {
			credentialIndexs = new HashMap();
			principalIndexs = new HashMap();
			LoginContext loginContext = new LoginContext("base",
					callbackHandler);
			loginContext.login();
			subject = loginContext.getSubject();
			Iterator credentials = subject.getPublicCredentials().iterator();
			for (; credentials.hasNext();) {
				Credential credential = (Credential) credentials.next();
				if (credential.isCurrent()) {
					CheckCallBack.AttributeQueue attributeQueue = credential
							.getCheckCallBack().getAttributeQueue();				
					credentialIndexs.put(credential.getLoginModule(),
							credential);					
					if (credential.getLoginModule().equals(this.moduleName))
						this.credential = credential;
				}

			}
			for (Iterator principals = subject.getPrincipals().iterator(); principals.hasNext();) {
				AuthPrincipal principal = (AuthPrincipal) principals.next();
				principalIndexs.put(principal.getLoginModuleName(), principal);
				if (principal.getLoginModuleName().equals(this.moduleName))
					this.principal = principal;
		
			}
		} catch (LoginException e) {
			
			e.printStackTrace();
		}
		
	}
	
	public String getMachineName()
	{
		String machineName = null;
		if(session != null)
		{
			machineName = (String)session.getAttribute(AccessControl.MACHINENAME_CACHE_KEY);
			
		}
		if(machineName == null)
		{
			return "";
		}
		return machineName;
	}
	private void innerlogon(UsernamePasswordCallbackHandler callbackHandler,
			String userName,
			boolean enablelog,boolean recordonlineuser) throws LoginException
	{
		LoginContext loginContext = new LoginContext("base",
				callbackHandler);
		loginContext.login();
		/**
		 * 通过验证以后，判断用户是否已经登录系统，如果已经登录了，按以下情况进行相应处理：
		 * 1.不允许用户多次登录系统时,将先前登录的用户从系统中剔除
		 * 2.应用存在多实例或者应用部署在集群环境中时,将先前登录的用户从系统中剔除
		 */
		if ((!enablemutilogin 
				|| cluster_session_synchronize) 
				&& recordonlineuser && onlineUser.existUser(userName) )
		{
			onlineUser.removeUser(userName);
//			throw new AccessException("用户[" + userName + "]已登陆,登陆情况为：\\n"
//					+ onlineUser.getUserLoginInfo(userName)
//					+ "，系统不允许用户在同时多次登陆。");
		}
		subject = loginContext.getSubject();
		// 将loginContext缓冲到session中
		// session.setAttribute(LOGINCONTEXT_CACHE_KEY, loginContext);
		// 缓冲远程地址，以便session实效时清除未清除的用户信息
		String machineIP = request.getParameter("machineIp_");
		if(machineIP == null || machineIP.trim().equals(""))
			machineIP = request.getRemoteAddr();
		session.setAttribute(REMOTEADDR_CACHE_KEY, machineIP);
		/**
		 * 获取客服端网卡的mac地址
		 */
		String macaddr = request.getParameter("macaddr_");
		String machineName = request.getParameter("machineName_");
		 
		session.setAttribute(MACADDR_CACHE_KEY, macaddr);
		session.setAttribute(AccessControl.MACHINENAME_CACHE_KEY, machineName);
		session.setAttribute(SESSIONID_CACHE_KEY,session.getId());

		StringBuffer ssoCookie = new StringBuffer();
		StringBuffer credentialCookie = new StringBuffer();
		boolean flag = false;
		Iterator credentials = subject.getPublicCredentials().iterator();
		for (; credentials.hasNext();) {
			Credential credential = (Credential) credentials.next();
			if (credential.isCurrent()) {
				CheckCallBack.AttributeQueue attributeQueue = credential
						.getCheckCallBack().getAttributeQueue();
				if (attributeQueue.size() > 0) {
					if (!flag) {
						flag = true;
					} else {
						credentialCookie.append(CREDENTIAL_SPLIT);
					}
					credentialCookie.append(credential.getLoginModule())
							.append(CREDENTIAL_ATTRIBUTE_SPLIT);
					boolean _flag = false;
					for (int i = 0; i < attributeQueue.size(); i++) {
						if (!_flag) {
							_flag = true;
						} else {
							credentialCookie.append(ATTRIBUTE_SPLIT);
						}
						CheckCallBack.Attribute attr = attributeQueue
								.get(i);
						credentialCookie.append(attr.getName()).append("=")
								.append(attr.getValue());
					}
				}
				credentialIndexs.put(credential.getLoginModule(),
						credential);
				
				if (credential.getLoginModule().equals(this.moduleName))
					this.credential = credential;

			}

		}
		flag = false;
		for (Iterator principals = subject.getPrincipals().iterator(); principals
				.hasNext();) {
			AuthPrincipal principal = (AuthPrincipal) principals.next();
			principalIndexs.put(principal.getLoginModuleName(), principal);
			if (principal.getLoginModuleName().equals(this.moduleName))
				this.principal = principal;
			if (!flag) {
				ssoCookie.append(principal.getLoginModuleName()).append(
						IDENTITY_SPLIT).append(principal.getName());
				flag = true;
			} else {
				ssoCookie.append(PRINCIPAL_SPLIT).append(
						principal.getLoginModuleName()).append(
						IDENTITY_SPLIT).append(principal.getName());
			}
		}
		if (ssoCookie.length() > 0) {
			ssoCookie.insert(0, "encrypt=false" + HEAD_SPLIT);
			ssoCookie.append(PRINCIPAL_CREDENTIAL_SPLIT).append(
					credentialCookie);
		}
		// 添加用户的所有身份索引到session中
		session.setAttribute(PRINCIPAL_INDEXS, principalIndexs);
		// 添加用户的所有属性到session中
		session.setAttribute(CREDENTIAL_INDEXS, credentialIndexs);
		String subsystem_id = request.getParameter(SUBSYSTEM_ID);
		if (subsystem_id == null || subsystem_id.equals(""))
			subsystem_id = "module";
		// 将用户登录的子系统模块名称添加到session中
		session.setAttribute(Framework.SUBSYSTEM, subsystem_id);

		if (ConfigManager.getInstance().isSecuritycookieenabled()
				&& (ConfigManager.getInstance().securityEnabled() || ConfigManager
						.getInstance().isSSO())) {

			// 添加用户登录信息到客服端cookie中，以便实现单点登录
			log.debug("生成sso Cookie[" + PRINCIPALS_COOKIE + ","
					+ ssoCookie.toString() + "]");
			Cookie newCookie = new Cookie(PRINCIPALS_COOKIE,
					java.net.URLEncoder.encode(ssoCookie.toString()));

			// 记录cookie
			newCookie.setMaxAge(86400);
			
			response.addCookie(newCookie);

			// 记录cookie

			Cookie subsystemCookie = new Cookie(SUBSYSTEM_COOKIE + "_"
					+ userName, subsystem_id);
			subsystemCookie.setMaxAge(86400);
			response.addCookie(subsystemCookie);
		}
		log.info("用户[" + getUserName() + "]登录系统.");
		String serverIp = request.getServerName();
		String serverport = request.getServerPort() + "";
		session.setAttribute(SERVER_IP_KEY,serverIp);
		session.setAttribute(SERVER_PORT_KEY,serverport);
		if(recordonlineuser)
		{
			onlineUser.valueBound(session.getId(), getUserAccount(), machineIP,
	//				request.getRemoteAddr(),
					macaddr,machineName,serverIp,serverport);
		}
		current.set(this);
		
		// ------------登陆时保存用户日志信息
		if(enablelog && recordonlineuser)
		{
			try {
				LogManager logMgr = SecurityDatabase.getLogManager();
				String userrelName = getUserName();
				String operContent = userName + "(" +userrelName + ")" + " 登陆["
						+ getCurrentSystemName() + "]";
				String operSource = this.getMachinedID();
				String openModle = "认证管理";

				logMgr.log(userName, operContent,
						openModle, operSource);
			} catch (SPIException e1) {
				
				e1.printStackTrace();
			} catch (ManagerException e) {
				
				e.printStackTrace();
			}
		}
	}

	/**
	 * 系统用户从Dreamweaver客服端登录接口
	 * 目前的ssoCookie未加密,将来需实现ssoCookie的加密处理,用户的信息cookie格式： loginMudleName + #$% +
	 * userName 不同身份信息之间以^_^分隔，例如
	 * loginMudleName#$%userName^_^loginMudleName1#$#userName1^|^loginModuleName@|@name1=value1@~@name=value
	 * 属性列表： ssoCookie在登录时创建，将作为令牌在门户中的各应用系统之间传递的，从而实现单点登录。
	 * 当用户关闭浏览器或者退出登录时，ssoCookie自动失效 不记录用户的在线信息
	 * 
	 * @param request
	 * @param response
	 * @param userName
	 * @param password
	 * @param userType
	 *            用户类型 0-标识外部用户，1-标识内部用户
	 * @return
	 * @throws AccessException
	 */

	public boolean logindw(HttpServletRequest request,
			HttpServletResponse response, String userName, String password,
			String userType) throws AccessException

	{

		if(userType != null && !userType.equals(""))
		{
			return logindw(request, response, userName, password,
					new String[] { userType });
		}
		else
		{
			return logindw(request, response, userName, password,
					(String[])null);
		}
	}
	
	public String getRemoteAddr()
	{
		String ip = null;
		if(session != null)
		{
			ip = (String)session.getAttribute(REMOTEADDR_CACHE_KEY);
		}
		if(ip == null)
			return "";
		return ip;
		
	}
	
	public String getMachinedID()
	{
		String machineID = this.getRemoteAddr() + "||" + this.getMacAddr() + "||" + this.getMachineName()
		;
		return machineID;
	}

	/**
	 * 系统用户从Dreamweaver客服端登录接口
	 * 目前的ssoCookie未加密,将来需实现ssoCookie的加密处理,用户的信息cookie格式： loginMudleName + #$% +
	 * userName 不同身份信息之间以^_^分隔，例如
	 * loginMudleName#$%userName^_^loginMudleName1#$#userName1^|^loginModuleName@|@name1=value1@~@name=value
	 * 属性列表： ssoCookie在登录时创建，将作为令牌在门户中的各应用系统之间传递的，从而实现单点登录。
	 * 当用户关闭浏览器或者退出登录时，ssoCookie自动失效 不记录用户的在线信息
	 * 
	 * @param request
	 * @param response
	 * @param userName
	 * @param password
	 * @param userType
	 *            用户类型 0-标识外部用户，1-标识内部用户
	 * @return
	 * @throws AccessException
	 */

	public boolean logindw(HttpServletRequest request,
			HttpServletResponse response, String userName, String password)
			throws AccessException

	{

		return logindw(request, response, userName, password,
				(String[] )null);
	}

	/**
	 * 系统用户从Dreamweaver客服端登录接口
	 * 目前的ssoCookie未加密,将来需实现ssoCookie的加密处理,用户的信息cookie格式： loginMudleName + #$% +
	 * userName 不同身份信息之间以^_^分隔，例如
	 * loginMudleName#$%userName^_^loginMudleName1#$#userName1^|^loginModuleName@|@name1=value1@~@name=value
	 * 属性列表： ssoCookie在登录时创建，将作为令牌在门户中的各应用系统之间传递的，从而实现单点登录。
	 * 当用户关闭浏览器或者退出登录时，ssoCookie自动失效 不记录用户的在线信息
	 * 
	 * @param request
	 * @param response
	 * @param userName
	 * @param password
	 * @param userType
	 *            用户类型 0-标识外部用户，1-标识内部用户
	 * @return
	 * @throws AccessException
	 */

	public boolean logindw(HttpServletRequest request,
			HttpServletResponse response, String userName, String password,
			String[] userTypes) throws AccessException

	{

		
		UsernamePasswordCallbackHandler callbackHandler = new UsernamePasswordCallbackHandler(
				userName, password, userTypes);

		principalIndexs = new HashMap();
		credentialIndexs = new HashMap();
		this.request = request;
		this.response = response;
		session = request.getSession();
		
		try {
			innerlogon(callbackHandler,
					userName,
					 true,false);	
			session.setAttribute(AccessControl.SESSIONID_FROMCLIENT_KEY, new Boolean(true));
			return true;
		} catch (LoginException ex) {
			
			throw new AccessException(ex.getMessage());
		}
	}
	
	

	/**
	 * 用户修改密码时，同步session中保存的用户密码
	 * 
	 * @param newPassword
	 *            String
	 */
	public void refreshPassword(String newPassword) {
		if (this.getUserAttribute("password") != null) {
			this.credential.getCheckCallBack().setUserAttribute(
					"password",
					com.frameworkset.platform.security.authentication.EncrpyPwd
							.encodePassword(newPassword));
			this.credential.getCheckCallBack().setUserAttribute("password_i",
					newPassword);
		}
	}

	/**
	 * 修改用户密码时同步用户邮箱帐号的密码
	 * 
	 * @param userEmail
	 *            String 用户邮箱帐号
	 * @param newPassword
	 *            String 新密码
	 */
	public static void updateMailPassword(String userEmail, String newPassword) {
		String mailValidata = ConfigManager.getInstance().getConfigValue(
				"mailValidata");
		if (mailValidata != null && mailValidata.equals("1")) {
			String url = "http://"
					+ ConfigManager.getInstance().getConfigValue("mailServer")
					+ "/creator_changepw.asp?username=" + userEmail + "&pw1="
					+ newPassword;
			com.frameworkset.platform.synchronize.httpclient.ApachePostMethodClient client = new com.frameworkset.platform.synchronize.httpclient.ApachePostMethodClient(
					url);
			try {
				String clientResponse = client.sendRequest();
			} catch (Exception ex) {
				ex.printStackTrace();

			} finally {
				client = null;
			}
		}
	}

	/**
	 * 检查用户是否登录，如果没有登录，系统将跳转的登录页面 检查用户是否有权限，如果没有权限访问本页面将跳转的权限检测失败页面
	 */
	public boolean checkAccess(HttpServletRequest request,
			HttpServletResponse response) {
		return checkAccess(request, response, null, true);
	}
	
	/**
	 * 检测当前登陆用户是否是管理员或者拥有超级管理员角色
	 * @throws Exception 
	 */
	public boolean checkManagerAccess(HttpServletRequest request,
			HttpServletResponse response){
		boolean success = checkAccess(request, response);
//		if(response.isCommitted()){
//			throw new AccessException("系统错误！");
//		}
		if(!success)
			return false;
		if(isAdmin() || isOrgManager(getUserAccount())){
			return true;
		}else{
			redirectManager(request,response,"/purviewmanager/nopermission.jsp");
			return false;
		}
		
	}
	
	/**
	 * 检测当前登陆用户是否是管理员
	 */
	public boolean checkAdminAccess(HttpServletRequest request,
			HttpServletResponse response) {
		boolean success = checkAccess(request, response);
		if(!success)
			return false;
		if(isAdmin()){
			return true;
		}else{
			redirectManager(request,response,"/purviewmanager/onlyAdminPermission.jsp");
			return false;
		}
		
	}
	
	/**
	 * 检查用户是否登录，如果没有登录，系统将跳转的登录页面 检查用户是否有权限，如果没有权限访问本页面将跳转的权限检测失败页面
	 */
	public boolean checkAccess(String[] needUserTypes,HttpServletRequest request,
			HttpServletResponse response) {
		return checkAccess( needUserTypes,  request,
				 response, null,true,null);
	}

	/**
	 * 检查用户是否登录，如果没有登录系统将跳转到redirectPath指定的页面，如果redirectPath为null或者为""
	 * 将缺省地跳转到配置文件config-manager.xml中指定的登录页面。 重定向规则如下：
	 * 重定项之前首先检查response的状态，如果状态为commited则不跳转，直接返回。
	 * 如果commited为false再对参数标识的页面地址进行处理，处理方法如下：
	 * 如果redirectPath的第一个字符为"/"或者"\\"，并且路径中没有包含应用的contextPath时，
	 * 本方法通过处理将contextPath追加在redirectPath之前，然后跳转到处理过的页面地址。
	 * 否则不进行处理，直接跳转到redirectPath对应的页面。
	 * 
	 * @param request
	 * @param response
	 * @param redirectPath
	 * @return
	 */
	public boolean checkAccess(HttpServletRequest request,
			HttpServletResponse response, String redirectPath) {
		return checkAccess(request, response, null, true, redirectPath);
	}

	/**
	 * 检查用户是否登录
	 * 
	 */
	public boolean checkAccess(HttpServletRequest request,
			HttpServletResponse response, boolean protect) {
		return checkAccess(request, response, null, protect);
	}

	public boolean checkAccess(HttpServletRequest request,
			HttpServletResponse response, JspWriter out, boolean protect) {


		return checkAccess(request,
				response, out, protect,
				null);

	}

	/**
	 * 判断当前登录的用户类型是否与要求的用户类型一致，一致返回true，否则返回false
	 * 
	 * @param userType
	 * @return
	 */
	private boolean checkUserType(String[] userTypes) {
		if(userTypes == null || userTypes.length == 0)
			return true;
		
		Credential dd = (Credential) credentialIndexs.get(this.moduleName);
		String _userType = (String) dd.getCheckCallBack().getUserAttribute(
				"LOGINCONTEXT.USERTYPE");
		if (_userType != null && !_userType.equals("")) {
			StringBuffer b = new StringBuffer();
			for(int i = 0; i < userTypes.length; i ++)
			{
				String userType = userTypes[i];
				if (userType != null && _userType.equals(userType)) {
					b.setLength(0);
					return true;
				}
				b.append(userType).append(",");
			}
			log.debug("用户类型不一致，访问当前模块需要的类型为[needType=" + b.toString()
					+ "],但是用户的类型为[userType=" + _userType + "]");
			return false;
		}

		return true;
	}

	/**
	 * 检测当前访问系统的用户是否登录过系统，并且该用户的类型必须是给定的userType类型， 否则将不允许用户访问请求的资源，并跳转到登录页面
	 * 
	 * @param userType
	 *            用户类型
	 * @param request
	 * @param response
	 * @param out
	 * @param protect
	 * @deprecated 请参考方法 checkAccess(String userType,HttpServletRequest request,
	 *             HttpServletResponse response)
	 * @return
	 */
	public boolean checkAccess(String userType, HttpServletRequest request,
			HttpServletResponse response, JspWriter out) {
		return checkAccess(new String[] {userType}, request,response, out,null);


	}

	/**
	 * 检测当前访问系统的用户是否登录过系统，并且该用户的类型必须是给定的userType类型， 否则将不允许用户访问请求的资源，并跳转到登录页面
	 * 
	 * @param userType
	 *            用户类型
	 * @param request
	 * @param response
	 * @param protect
	 * @return
	 */
	public boolean checkAccess(String userType, HttpServletRequest request,
			HttpServletResponse response) {

		return checkAccess(userType, request, response, (JspWriter) null);
	}

	public boolean checkAccess(HttpServletRequest request,
			HttpServletResponse response, JspWriter out, boolean protect,
			boolean abc) {
		return this.checkAccess( request,response,out,  protect);
	}

	public boolean checkAccess(HttpServletRequest request,
			HttpServletResponse response, JspWriter out, boolean protect,
			String redirectPath) {


		
		return checkAccess(null,  request,
				 response,  out, protect, redirectPath);

	}

	/**
	 * 当前访问系统的用户是否登录过系统，并且该用户的类型必须是给定的userType类型，
	 * 否则将不允许用户访问请求的资源，并跳转到redirectPath对应的页面
	 * 
	 * @param userType
	 * @param request
	 * @param response
	 * @param redirectPath
	 * @return
	 */
	public boolean checkAccess(String userType, HttpServletRequest request,
			HttpServletResponse response, String redirectPath) {
		return this.checkAccess(new String[] {userType}, request, response, null,redirectPath);

	}
	
	public boolean checkAccess(String[] userType, HttpServletRequest request,
			HttpServletResponse response, JspWriter out,String redirectPath) {
		
		return checkAccess(userType,  request,
				 response,  out,true, redirectPath);
	}
	
	public boolean checkAccess(String[] userTypes, HttpServletRequest request,
			HttpServletResponse response, JspWriter out,boolean protect,String redirectPath) {		
		this.request = request;
		this.response = response;		
		// this.out = out;
		this.session = this.request.getSession();
		
		// onlineUser =
		// (OnLineUser)session.getServletContext().getAttribute("onlineUser");
		if (!protect) {

			principalIndexs = (Map) session.getAttribute(PRINCIPAL_INDEXS);
			// 添加用户的所有属性到session中
			credentialIndexs = (Map) session.getAttribute(CREDENTIAL_INDEXS);

			if (this.principalIndexs != null) {
				this.principal = (Principal) principalIndexs.get(moduleName);
			}
			if (this.credentialIndexs != null) {
				this.credential = (Credential) credentialIndexs
						.get(this.moduleName);
			}
			String sessionid = (String)session.getAttribute(SESSIONID_CACHE_KEY);
			Boolean fromclient =  (Boolean)session.getAttribute(SESSIONID_FROMCLIENT_KEY);
			if (principal != null
					&& (fromclient == null && !onlineUser.existUser(principal.getName(), sessionid))) {
				if(redirectPath == null || redirectPath.equals(""))
				{					
					this.logoutwithalt_(null, null,true, true,"kickout") ;
				}
				else
				{
//					this.logout(redirectPath);
					this.logoutwithalt_(redirectPath, null,true, true,"kickout") ;
				}
				return false;
			}
			current.set(this);
			
			/**
			 * 检查当前用户的类型是否在被允许的范围内，不允许则跳转到相应的页面
			 */
			if (!checkUserType(userTypes))
			{
				if(redirectPath == null || redirectPath.equals(""))
				{
					this.redirect();
				}
				else
				{
					redirect(request, response, redirectPath);
				}
				return false;
			}
			
			return true;
		}

		if (session.getAttribute(PRINCIPAL_INDEXS) == null) // 如果没有当前用户的会话信息，则判断cookie中是否有当前用户的登录信息
		{
			String OUT_useraccount = request
					.getParameter(OUTER_USER_ACCOUNT_KEY);
			String OUT_userpassord = request
					.getParameter(OUTER_USER_PASSWORD_KEY);

			/**
			 * 判断用户是否从外部系统访问bs系统，如果不是则从cookie中获取用户登录信息，
			 * 如果是则获取外部用户信息进行登录操作，如果用户登录成功则允许访问系统，否则不允许
			 */
			if (OUT_useraccount == null || OUT_useraccount.equals("")) {
				// 启用了系统安全性、或者启用了页面保护、或者启用了sso机制，则尝试从cookie中恢复用户信息
				if (ConfigManager.getInstance().isSecuritycookieenabled()
						&& (protect
								|| ConfigManager.getInstance()
										.securityEnabled() || ConfigManager
								.getInstance().isSSO())) {
					Cookie[] cookies = request.getCookies();
					int idx = 0;
					boolean flag = false;
					for (int i = 0; cookies != null && i < cookies.length; i++) {
						// log.debug("cookies["+i+"].getName():" +
						// cookies[i].getName());
						// log.debug("cookies["+i+"].getValue():" +
						// cookies[i].getValue());
						if (cookies[i].getName().equals(PRINCIPALS_COOKIE)) {

							flag = true;
							idx = i;
							break;
						}
					}
					if (!flag) {
						if (ConfigManager.getInstance().securityEnabled())
						{
							if(redirectPath == null || redirectPath.equals(""))
							{
								this.redirect();
							}
							else
							{
								redirect(request, response, redirectPath);
							}
						}
						return false;
					}

					// log.debug("idx:" + idx);
					// log.debug("flag:" + flag);

					String ssoCookie = java.net.URLDecoder.decode(cookies[idx]
							.getValue());
					CookieUtil cookieUtil = new CookieUtil();
					Object[] messages = cookieUtil.refactorPricipal(ssoCookie);

					if (messages != null) {
						principalIndexs = (Map) messages[0];
						credentialIndexs = (Map) messages[1];
						subject = (Subject) messages[2];

						// 添加用户的所有身份索引到session中
						session.setAttribute(PRINCIPAL_INDEXS,
								principalIndexs);
						// 添加用户的所有属性到session中
						session.setAttribute(CREDENTIAL_INDEXS,
								credentialIndexs);


					} else {
						if (ConfigManager.getInstance().securityEnabled())
						{
							if(redirectPath == null || redirectPath.equals(""))
							{
								this.redirect();
							}
							else
							{
								redirect(request, response, redirectPath);
							}
						}
						return false;
					}
				} else {
					if (ConfigManager.getInstance().securityEnabled())
					{
						if(redirectPath == null || redirectPath.equals(""))
						{
							this.redirect();
						}
						else
						{
							redirect(request, response, redirectPath);
						}
					}
					return false;
				}
			} else {
				try {
					boolean su =  this.logindw(request, response, OUT_useraccount,
							OUT_userpassord);
					if(!su)
					{
						if (ConfigManager.getInstance().securityEnabled()) {
							if(redirectPath == null || redirectPath.equals(""))
							{
								this.redirect();
							}
							else
							{
								redirect(request, response, redirectPath);
							}
						}
						return false;
					}
					return su;
					
				} catch (AccessException e) {

					if (ConfigManager.getInstance().securityEnabled()) {
						if(redirectPath == null || redirectPath.equals(""))
						{
							this.redirect();
						}
						else
						{
							redirect(request, response, redirectPath);
						}
					}
					return false;
				}
			}
		}
		else // 如果有会话信息，直接获取用户的会话信息
		{
			principalIndexs = (Map) session.getAttribute(PRINCIPAL_INDEXS);
			// 添加用户的所有属性到session中
			credentialIndexs = (Map) session.getAttribute(CREDENTIAL_INDEXS);
			// mmmm
			String sessionid = (String)session.getAttribute(SESSIONID_CACHE_KEY);
			Boolean fromclient =  (Boolean)session.getAttribute(SESSIONID_FROMCLIENT_KEY);
			if (principal != null
					&& (fromclient == null && !onlineUser.existUser(principal.getName(), sessionid))) {
				if(redirectPath == null || redirectPath.equals(""))
				{					
					this.logoutwithalt_(null, null,true, true,"kickout") ;
				}
				else
				{
//					this.logout(redirectPath);
					this.logoutwithalt_(redirectPath, null,true, true,"kickout") ;
				}
	
				return false;
			}

		}
		if (this.principalIndexs != null) {
			this.principal = (Principal) principalIndexs.get(moduleName);
			// mmmm
			String sessionid = (String)session.getAttribute(SESSIONID_CACHE_KEY);
			Boolean fromclient =  (Boolean)session.getAttribute(SESSIONID_FROMCLIENT_KEY);
			if (principal != null
					&& (fromclient == null && !onlineUser.existUser(principal.getName(), sessionid))) {
				if(redirectPath == null || redirectPath.equals(""))
				{					
					this.logoutwithalt_(null, null,true, true,"kickout") ;
				}
				else
				{
//					this.logout(redirectPath);
					this.logoutwithalt_(redirectPath, null,true, true,"kickout") ;
				}
				return false;
			}
		} else {
			if (ConfigManager.getInstance().securityEnabled())
			{
				if(redirectPath == null || redirectPath.equals(""))
				{
					this.redirect();
				}
				else
				{
					redirect(request, response, redirectPath);
				}
			}
			return false;
		}
		if (this.credentialIndexs != null) {
			this.credential = (Credential) credentialIndexs
					.get(this.moduleName);
		} else {
			if (ConfigManager.getInstance().securityEnabled())
			{
				if(redirectPath == null || redirectPath.equals(""))
				{
					this.redirect();
				}
				else
				{
					redirect(request, response, redirectPath);
				}
			}
			return false;
		}
		current.set(this);
		/**
		 * 检查当前用户的类型是否在被允许的范围内，不允许则跳转到相应的页面
		 */
		if (!checkUserType(userTypes))
		{
			if(redirectPath == null || redirectPath.equals(""))
			{
				this.redirect();
			}
			else
			{
				redirect(request, response, redirectPath);
			}
			return false;
		}
		
		return true;
	}

	/**
	 * 当前访问系统的用户是否登录过系统，并且该用户的类型必须是给定的userType类型，
	 * 否则将不允许用户访问请求的资源，并跳转到redirectPath对应的页面
	 * 
	 * @param userType
	 * @param request
	 * @param response
	 * @param out
	 * @param redirectPath
	 * @deprecated 请参考方法 checkAccess(String userType,HttpServletRequest request,
	 *             HttpServletResponse response, String redirectPath)
	 * @return
	 */
	public boolean checkAccess(String userType, HttpServletRequest request,
			HttpServletResponse response, JspWriter out, String redirectPath) {
		return checkAccess(new String[] {userType}, request,
				response, out, redirectPath);


	}

	/**
	 * 检查用户是否有访问系统的权限
	 * 
	 */
	public boolean checkAccess(PageContext pageContext, boolean protect) {
		return checkAccess((HttpServletRequest) pageContext.getRequest(),
				(HttpServletResponse) pageContext.getResponse(), null, protect);
	}

	/**
	 * 重定向到相关的页面 重定项之前首先检查response的状态，如果状态为commited则不跳转，直接返回。
	 * 如果commited为false再对参数标识的页面地址进行处理，处理方法如下：
	 * 如果redirectPath的第一个字符为"/"或者"\\"，并且路径中没有包含应用的contextPath时，
	 * 本方法通过处理将contextPath追加在redirectPath之前，然后跳转到处理过的页面地址。
	 * 否则不进行处理，直接跳转到redirectPath对应的页面。
	 * 
	 * @param request
	 * @param response
	 * @param redirectPath
	 */

	public static void redirect(HttpServletRequest request,
			HttpServletResponse response, String redirectPath) {
		if (redirectPath == null || redirectPath.trim().equals("")) {
			redirectPath = ConfigManager.getInstance().getLoginPage();
		}
		if (redirectPath == null || redirectPath.trim().equals(""))
			redirectPath = "/login.jsp";
		try {

			// 如果response已经提交过，则不执行重定向操作，否则执行
			if (!response.isCommitted()) {
				String t_redirectPath = StringUtil.getRealPath(request,
						redirectPath);
				response.sendRedirect(t_redirectPath);
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 重定向到相关的页面 重定项之前首先检查response的状态，如果状态为commited则不跳转，直接返回。
	 * 如果commited为false再对参数标识的页面地址进行处理，处理方法如下：
	 * 如果redirectPath的第一个字符为"/"或者"\\"，并且路径中没有包含应用的contextPath时，
	 * 本方法通过处理将contextPath追加在redirectPath之前，然后跳转到处理过的页面地址。
	 * 否则不进行处理，直接跳转到redirectPath对应的页面。
	 * 
	 * @param request
	 * @param response
	 * @param redirectPath
	 * @param redirecttarget
	 */

	public static void redirect(HttpServletRequest request,
			HttpServletResponse response, String redirectPath,
			String redirecttarget) {
		redirect(request,
				 response,  redirectPath,
				 redirecttarget,false);

	}
	
	public static void redirect(HttpServletRequest request,
			HttpServletResponse response, String redirectPath,
			String redirecttarget,boolean _alertMsg) {
		if (redirectPath == null || redirectPath.trim().equals("")) {
			redirectPath = ConfigManager.getInstance().getLoginPage();
		}
		if (redirectPath == null || redirectPath.trim().equals(""))
			redirectPath = "/login.jsp";

		if (redirecttarget == null || redirecttarget.trim().equals(""))
			redirecttarget = "top";

		try {
			// 如果response已经提交过，则不执行重定向操作，否则执行
			if (!response.isCommitted()) {
				StringBuffer url = new StringBuffer(request.getContextPath());
				url.append("/" )
				.append( LOGOUT_REDIRECT)
						.append("?_redirectPath=" )
						.append( StringUtil.encode(redirectPath))
						.append( "&_redirecttarget=" )
						.append( redirecttarget)						
						;
				if(_alertMsg)
				{
					url.append( "&_alertMsg=true");
				}
				response.sendRedirect(url.toString());
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	private void redirect(boolean _alertMsg) {

		try {
			// 如果response已经提交过，则不执行重定向操作，否则执行
			//从分页列表树数据加载器执行页面保护失败时，不需要跳转，所以response为null，
			//此处需要判断reponse是否为null
			if (response != null && !response.isCommitted()) {
				StringBuffer url = new StringBuffer(request.getContextPath());
				url.append("/")
				.append(LOGOUT_REDIRECT)
				.append("?_redirectPath=")
				.append(StringUtil.encode(request.getContextPath() + "/"
						+ loginPage) );
				if(_alertMsg)
				{
					url.append( "&_alertMsg=true");
				}
				response.sendRedirect(url.toString());
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}
	
	private void redirect() {

		redirect(false);

	}
	
	private void redirectManager(HttpServletRequest request,HttpServletResponse response,String redirectPath) {
		try {
			if (response != null && !response.isCommitted()) {
				StringBuffer url = new StringBuffer(request.getContextPath());
				url.append(redirectPath);
				response.sendRedirect(url.toString());
			}

		} catch (IOException e) {
			e.printStackTrace();
		} catch(Exception e){
			e.printStackTrace();
		}

	}

	/**
	 * 检查用户是否有访问系统的权限
	 * 
	 */
	public boolean checkAccess(HttpSession session) {
		this.session = session;
		// onlineUser =
		// (OnLineUser)session.getServletContext().getAttribute("onlineUser");
		principalIndexs = (Map) session.getAttribute(PRINCIPAL_INDEXS);
		// 添加用户的所有属性到session中
		credentialIndexs = (Map) session.getAttribute(CREDENTIAL_INDEXS);

		if (this.principalIndexs != null)
			this.principal = (Principal) principalIndexs.get(moduleName);
		// else
		// {
		//
		// }
		if (this.credentialIndexs != null)
			this.credential = (Credential) credentialIndexs
					.get(this.moduleName);
		return true;
	}

	/**
	 * 检查用户是否有访问系统的权限
	 * 
	 */
	public boolean checkAccess(PageContext pageContext) {
		return this.checkAccess(pageContext, true);
	}

	/**
	 * 检查权限接口
	 * 
	 * @param pageContext
	 *            PageContext
	 * @param resourceID
	 *            String
	 * @return boolean
	 */
	public boolean checkPermission(PageContext pageContext, String resourceID,
			String action) {
		// onlineUser = (OnLineUser)pageContext.getAttribute("onlineUser");
		if (!ConfigManager.getInstance().securityEnabled())
			return true;
		else {

			this.request = (HttpServletRequest) pageContext.getRequest();
			this.response = (HttpServletResponse) pageContext.getResponse();
			// this.out = pageContext.getOut();
			this.session = request.getSession();
			this.principalIndexs = (Map) session.getAttribute(PRINCIPAL_INDEXS);
			this.credentialIndexs = (Map) session
					.getAttribute(CREDENTIAL_INDEXS);
			this.principal = (Principal) principalIndexs.get(ConfigManager
					.getInstance().getModuleName());
			String resourceType = ConfigManager.getInstance().getResourceInfo()
			.getId();

			return checkPermission( resourceID, action,resourceType);
		}
	}

	/**
	 * 检查用户userAccount是否拥有资源resourceId的操作action的权限
	 * 
	 * @param pageContext
	 *            PageContext
	 * @param resourceID
	 *            String
	 * @return boolean
	 */
	public static boolean checkPermission(Principal principal,
			String resourceID, String action) {
		return checkPermission(principal, resourceID, action, null);
	}

	/**
	 * 检查用户userAccount是否拥有资源resourceId的操作action的权限
	 * 
	 * @param pageContext
	 *            PageContext
	 * @param resourceID
	 *            String
	 * @return boolean
	 */
	public static boolean checkPermission(Principal principal,
			String resourceID, String action, String resourceType) {

		if (resourceType == null)
			resourceType = ConfigManager.getInstance().getResourceInfo()
					.getId();
		String userID = ((AuthPrincipal)principal).getUserID();
		if(userID == null)
			userID = AccessControl.getUserIDByUserAccount(principal.getName());
		if (ROLE_RESOURCE.equalsIgnoreCase(resourceType)) // 判断角色是否当前用户创建，如果是当前用户创建则拥有该角色的全部操作权限
		{
			if (isAdmin(principal.getName()))
				return true;
			
			Role role = RoleCacheManager.getInstance().getRoleByID(resourceID);
			if (role != null) {
				if (userID.equals(role.getOwner_id() + ""))
					return true;
			}

		}

		else if (JOB_RESOURCE.equalsIgnoreCase(resourceType)) {// 判断岗位是否当前用户创建，如果是当前用户创建则拥有该岗位的全部操作权限
			if (isAdmin(principal.getName()))
				return true;
			try {
				boolean state = JobManagerImpl.isJobCreatorByUserId(userID, resourceID);
				if (state) {
					return true;
				}
			} catch (ManagerException e) {
				e.printStackTrace();
			}
		}

		else if (GROUP_RESOURCE.equalsIgnoreCase(resourceType)) // 判断用户组是否当前用户创建，如果是当前用户创建则拥有该用户组的全部操作权限
		{
			if (isAdmin(principal.getName()))
				return true;
			Group group = GroupCacheManager.getInstance().getGroupByID(
					resourceID);
			if (group != null) {
				if (userID.equals(group.getOwner_id() + ""))
					return true;
			}

		}
		
		boolean ret = AppSecurityCollaborator.getInstance().checkAccess(principal,
				resourceID, action, resourceType);
		return ret;
	}

	public static String getUserIDByUserAccount(String userAccount) {
		try {
			UserManager um = SecurityDatabase.getUserManager();
			User user = um.getUserByName(userAccount);
			if (user == null)
				return "";
			return user.getUserId() + "";
		} catch (SPIException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ManagerException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "";

	}

	public static String getUserAccountByUserID(String usrID) {
		try {
			UserManager um = SecurityDatabase.getUserManager();
			User user = um.getUserById(usrID);
			if (user == null)
				return "";
			return user.getUserName() + "";
		} catch (SPIException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ManagerException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "";

	}

	/**
	 * 检查用户userAccount是否拥有资源resourceId的操作action的权限
	 * 
	 * @param pageContext
	 *            PageContext
	 * @param resourceID
	 *            String
	 * @return boolean
	 */
	public static boolean checkPermission(String useraccount,
			String resourceID, String action, String resourceType) {
		Principal principal = new AuthPrincipal(useraccount, null, null);
		return checkPermission(principal,
				 resourceID,  action,  resourceType);
		
	}

	/**
	 * 检查用户userAccount是否拥有资源resourceId的操作action的权限
	 * 
	 * @param pageContext
	 *            PageContext
	 * @param resourceID
	 *            String
	 * @return boolean
	 */
	public static boolean checkPermissionByUserID(String userID,
			String resourceID, String action, String resourceType) {
		String useraccount = AccessControl.getUserAccountByUserID(userID);

		Principal principal = new AuthPrincipal(useraccount, null, null,userID);
		return checkPermission(principal,
				 resourceID,  action,  resourceType);
	}
	
	/**
	 * 检查用户userAccount是否拥有资源resourceId的操作action的权限
	 * 
	 * @param pageContext
	 *            PageContext
	 * @param resourceID
	 *            String
	 * @return boolean
	 */
	public static boolean checkPermissionContext(String resourceID, String action, String resourceType) {
		String useraccount = AccessControl.getAccessControl().getUserAccount();
		String userID = AccessControl.getAccessControl().getUserID();

		Principal principal = new AuthPrincipal(useraccount, null, null,userID);
		return checkPermission(principal,
				 resourceID,  action,  resourceType);
	}

	/**
	 * 检测当前系统用户是否拥有访问资源的权限
	 * 
	 * @param resourceID
	 * @param action
	 * @param resourceType
	 * @return
	 */
	public boolean checkPermission(String resourceID, String action,
			String resourceType) {
		
		return checkPermission( resourceID,  action,
				 resourceType,  false,  null);
	}

	/**
	 * 检测当前系统用户是否拥有访问资源的权限，如果没有则跳转到权限提示页面 否则允许用户访问当前资源
	 * 根据条件redirect决定是否跳转，true表示跳转，false表示不跳转
	 * 
	 * @param resourceID
	 * @param action
	 * @param resourceType
	 * @param redirect
	 * @return
	 */
	public boolean checkPermission(String resourceID, String action,
			String resourceType, boolean redirect) {
		return checkPermission( resourceID,  action,
				 resourceType,  redirect,  null);
	}

	/**
	 * 检测当前系统用户是否拥有访问资源的权限，如果没有则跳转到权限提示页面 否则允许用户访问当前资源
	 * 根据条件redirect决定是否跳转，true表示跳转，false表示不跳转
	 * 
	 * @param resourceID
	 * @param action
	 * @param resourceType
	 * @param redirect
	 * @return
	 */
	public boolean checkPermission(String resourceID, String action,
			String resourceType, boolean redirect, String redirectPath) {
		//如果使用新版系统管理注释掉机构资源的判断    org_org
		//如果是机构资源且用户拥有该机构的管理员身份，则返回true
		if(this.isAdmin())
			return true;
		if(resourceType.equals(ORGUNIT_RESOURCE)){
//			if(this.isAdmin())
//				return true;
			//判断当前用户是否是resourceID对应的机构何上级机构的管理员，如果是的话，不管是什么操作都是可以做的
			if(this.isOrganizationManager(resourceID))
			{
				return true;
			}
			else if(action.equals(READ_PERMISSION))//如果当前用户是resourceID对应的机构的下级机构的管理员，可以进行读操作
			{
				if(this.isSubOrgManager(resourceID)){
					return true;
				}
			}
		}

		if (ROLE_RESOURCE.equalsIgnoreCase(resourceType)) // 判断角色是否当前用户创建，如果是当前用户创建则拥有该角色的全部操作权限
		{
//			if (this.isAdmin())
//				return true;
			Role role = RoleCacheManager.getInstance().getRoleByID(resourceID);
			if (role != null) {
				if (this.getUserID().equals(role.getOwner_id() + ""))
					return true;
			}

		}

		else if (JOB_RESOURCE.equalsIgnoreCase(resourceType)) {// 判断岗位是否当前用户创建，如果是当前用户创建则拥有该岗位的全部操作权限
//			if (this.isAdmin())
//				return true;
			try {
				boolean state = JobManagerImpl.isJobCreatorByUserId(this
						.getUserID(), resourceID);
				if (state) {
					return true;
				}
			} catch (ManagerException e) {
				e.printStackTrace();
			}
		}

		else if (GROUP_RESOURCE.equalsIgnoreCase(resourceType)) // 判断用户组是否当前用户创建，如果是当前用户创建则拥有该用户组的全部操作权限
		{
//			if (this.isAdmin())
//				return true;
			Group group = GroupCacheManager.getInstance().getGroupByID(
					resourceID);
			if (group != null) {
				if (this.getUserID().equals(group.getOwner_id() + ""))
					return true;
			}

		}

		

		boolean ret =  AppSecurityCollaborator.getInstance().checkAccess(principal,
				resourceID, action, resourceType);
		if (!ret && redirect) {
			// try {
			if (redirectPath == null || redirectPath.trim().equals(""))
				redirectPath = "/" + authorfailedPage;
			redirect(request, response, redirectPath);
			
		}
		return ret;
	}

	/**
	 * 登出系统，通过redirected参数控制是否跳转
	 * 
	 * @param redirected
	 */
	public void logout(boolean redirected) {
		logout(redirected, true);
	}

	/**
	 * 释放所有的session中的系统资源
	 */
	private static void releaseSession(HttpSession session) {
		session.removeAttribute(AccessControl.PRINCIPAL_INDEXS);
		session.removeAttribute(REMOTEADDR_CACHE_KEY);
		session.removeAttribute(MACADDR_CACHE_KEY);
		session.removeAttribute(SESSIONID_CACHE_KEY);
		
		// 添加用户的所有属性到session中
		session.removeAttribute(CREDENTIAL_INDEXS);
		session.removeAttribute(SERVER_IP_KEY);
		session.removeAttribute(SERVER_PORT_KEY);
		
		session.removeAttribute(Framework.SUBSYSTEM);
		session.removeAttribute(AccessControl.SESSIONID_FROMCLIENT_KEY);
		
		

	}

	/**
	 * 用户从dreamweaver客户端退出系统，不重定向系统
	 */

	public void logoutdw() {

		// LoginContext loginContext = (LoginContext) session
		// .getAttribute(LOGINCONTEXT_CACHE_KEY);
		Map principals = (Map) session.getAttribute(PRINCIPAL_INDEXS);

		if (principals == null) {

			return;
		}

		try {

			log.debug("用户[" + getUserName() + "]从客户端退出系统。");
			Subject subject = ((AuthPrincipal) principal).getSubject();
			LoginContext loginContext = new LoginContext(subject);
			loginContext.logout();

			// 清除cookie;
			if (ConfigManager.getInstance().isSecuritycookieenabled()
					&& (ConfigManager.getInstance().securityEnabled() || ConfigManager
							.getInstance().isSSO())) {

				{
					Cookie[] cookies = request.getCookies();
					for (int i = 0; i < cookies.length; i++) {
						if (cookies[i].getName().equals(PRINCIPALS_COOKIE)) {
							// 设置cookie一秒后失效
							cookies[i].setMaxAge(1);
							response.addCookie(cookies[i]);

						} else if (cookies[i].getName()
								.equals(SUBSYSTEM_COOKIE)) {
							cookies[i].setMaxAge(1);

							response.addCookie(cookies[i]);
						}
					}
				}

			}
			current.set(null);
			// 使session失效
			// session.removeAttribute(LOGINCONTEXT_CACHE_KEY);
		
			String machineID = getMachinedID();
			
			releaseSession(session);
			// onlineUser.valueUnbound(session.getId(),getUserAccount(),
			// request.getRemoteAddr());
			String userName = this.getUserName();
			String userAccount = this.getUserAccount();
			String userId = this.getUserID();
			
			session.invalidate();
			// System.out.println("session:" + session);
			// ------------退出时保存用户日志信息
			try {
				LogManager logMgr = SecurityDatabase.getLogManager();
				String operContent = userName + "[" + userId + "]"
						+ " 从客户端退出系统";
				String operSource = machineID;
				
				
				
				
				String openModle = "认证管理";

				logMgr.log(userAccount, operContent,
						openModle, operSource);
			} catch (SPIException e1) {
				e1.printStackTrace();
			} catch (ManagerException e) {
				e.printStackTrace();
			}

			// // -------------------
			// // 跳转到登录页面
			// if (redirected)
			// redirect();
		} catch (LoginException ex) {
			log.debug("从dreamweaver客户端退出系统失败：" + ex.getMessage());
		}
	}

	/**
	 * 用户登录退出
	 * 
	 * @param redirected
	 *            重定向控制开关
	 * @param enablelog
	 *            日志控制开关
	 */

	public void logout(boolean redirected, boolean enablelog) {

		logout(null, null,redirected, enablelog);

	}

	/**
	 * 如果系统没有正常退出系统，强制用户退出,当session实效之前， 如果用户还没有退出，调用该方法强制当前用户退出系统
	 * 
	 * @param pageContext
	 *            PageContext
	 */
	public static void logoutdirect(HttpSession session) {

		
		Map principalsIndexs = (Map) session.getAttribute(PRINCIPAL_INDEXS);

		if (principalsIndexs == null) {

			return;
		}
		AuthPrincipal principal_ = (AuthPrincipal) principalsIndexs
				.get(ConfigManager.getInstance().getModuleName());
		try {
			Subject subject = principal_.getSubject();
			String userName = null;
			for (Iterator principals = subject.getPrincipals().iterator(); principals
					.hasNext();) {
				AuthPrincipal principal = (AuthPrincipal) principals.next();

				if (principal.getLoginModuleName().equals(
						ConfigManager.getInstance().getModuleName())) {
					userName = principal.getName();

					break;
				}

			}
			LoginContext loginContext = new LoginContext(subject);
			loginContext.logout();
			// session.removeAttribute(LOGINCONTEXT_CACHE_KEY);
			if (userName == null) {

				return;
			}
			String address = (String) session
					.getAttribute(AccessControl.REMOTEADDR_CACHE_KEY);
			onlineUser.valueUnbound(session.getId(), userName, address,(String)session
					.getAttribute(AccessControl.MACADDR_CACHE_KEY));
			releaseSession(session);
			current.set(null);

			

		} catch (LoginException ex) {
			log.debug("退出登录失败：" + ex.getMessage());
		}
	}

	private String _alt;
	/**
	 * 用户登录退出
	 * 
	 * @param pageContext
	 *            PageContext
	 */
	public void logout() {

		logout(true, true);
	}

	/**
	 * 用户登录退出
	 * 
	 * @param redirect
	 *            String 用户退出系统重定向页面
	 */
	public void logout(String redirect) {
		logout(redirect, true);
	}

	/**
	 * 获取本地线程中的访问控制类
	 * 
	 * @return
	 */
	public static Subject getLocalSubject() {
		return getAccessControl().subject;
	}

	public static AccessControl getAccessControl() {
		AccessControl context = (AccessControl) current.get();
		if(context == null)
		{
			context = AccessControl.guest;
		}
		return context;
	}

	public Subject getSubject() {
		return ((AuthPrincipal) this.principal).getSubject();
	}

	/**
	 * 用户登录退出
	 * 
	 * @param redirect
	 *            String 用户退出系统重定向页面
	 */
	public void logout(String redirect, boolean enablelog) {
		logout( redirect,  null, true,  enablelog);
//		Map principalsIndexs = (Map) session.getAttribute(PRINCIPAL_INDEXS);
//
//		if (principalsIndexs == null) {
//			redirect();
//			return;
//		}
//		try {
//			String userName = getUserName();
//			log.debug("用户[" + getUserName() + "]退出系统。");
//
//			LoginContext loginContext = new LoginContext(this.getSubject());
//			loginContext.logout();
//			// 清除cookie;
//			Cookie[] cookies = request.getCookies();
//			for (int i = 0; i < cookies.length; i++) {
//				if (cookies[i].getName().equals(PRINCIPALS_COOKIE)) {
//					// 设置cookie一秒后失效
//					cookies[i].setMaxAge(1);
//
//					response.addCookie(cookies[i]);
//
//				} else if (cookies[i].getName().equals(SUBSYSTEM_COOKIE)) {
//					// 设置cookie一秒后失效
//					cookies[i].setMaxAge(1);
//
//					response.addCookie(cookies[i]);
//
//				}
//			}
//			// 使session失效
//			String subsystem = getCurrentSystemName();
//
//			String userAccount = this.getUserAccount();
//			String userId = this.getUserID();
//			onlineUser.valueUnbound(session.getId(), userAccount, request
//					.getRemoteAddr());
//			releaseSession(session);
//			session.invalidate();
//			// ------------退出时保存用户日志信息
//			if(enablelog)
//			{
//				try {
//					LogManager logMgr = SecurityDatabase.getLogManager();
//	
//					String operContent = userName + "[" + userId + "] 退出["
//							+ subsystem + "]";
//					String operSource = request.getRemoteAddr();
//					String openModle = "认证管理";
//	
//					logMgr.log(userAccount + ":" + userName, operContent,
//							openModle, operSource);
//				} catch (SPIException e1) {
//					e1.printStackTrace();
//				} catch (ManagerException e) {
//					e.printStackTrace();
//				}
//			}
//
//			
//			// 跳转到登录页面
//			redirect(request, response, redirect);
//		} catch (LoginException ex) {
//			log.debug("退出登录失败：" + ex.getMessage());
//		}
	}

	/**
	 * 用户登录退出
	 * 
	 * @param redirect
	 *            String 用户退出系统重定向地址
	 * @param redirecttarget
	 *            String 用户退出系统重定向窗口
	 * @param enablelog
	 *            用户退出系统是否记录日志
	 */
	public void logout(String redirect, String redirecttarget,boolean redirected, boolean enablelog) {

		
		logoutwithalt_( redirect,  redirecttarget, redirected,  enablelog,null);
	}
	
	/**
	 * 用户登录退出
	 * 
	 * @param redirect
	 *            String 用户退出系统重定向地址
	 * @param redirecttarget
	 *            String 用户退出系统重定向窗口
	 * @param enablelog
	 *            用户退出系统是否记录日志
	 */
	public void logoutwithalt_(String redirect, String redirecttarget,boolean redirected, boolean enablelog,String _alt) {

		
		Map principalsIndexs = (Map) session.getAttribute(PRINCIPAL_INDEXS);

		if (principalsIndexs == null) {
			if(redirected )
			{
				if(redirect == null && redirecttarget == null)
				{
					redirect();
				}
				else
				{
					redirect(request,response,redirect,redirecttarget);
				}
			}
			
			return;
		}

		try {

			log.debug("用户[" + getUserName() + "]退出系统。");
			
			LoginContext loginContext = new LoginContext(this.getSubject());
			loginContext.logout();
			// 清除cookie;
			Cookie[] cookies = request.getCookies();
			for (int i = 0; i < cookies.length; i++) {
				if (cookies[i].getName().equals(PRINCIPALS_COOKIE)) {
					// 设置cookie一秒后失效
					cookies[i].setMaxAge(1);

					response.addCookie(cookies[i]);

				} else if (cookies[i].getName().equals(SUBSYSTEM_COOKIE)) {
					// 设置cookie一秒后失效
					cookies[i].setMaxAge(1);

					response.addCookie(cookies[i]);

				}
			}
			// 使session失效
			String subsystem = getCurrentSystemName();
			String userAccount = this.getUserAccount();
			String userId = this.getUserID();

			String userName = this.getUserName();
			String machineIP = (String)session.getAttribute(REMOTEADDR_CACHE_KEY);
			String orgID = this.getChargeOrgId();
			onlineUser.valueUnbound(session.getId(), userAccount, machineIP,(String)session.getAttribute(MACADDR_CACHE_KEY));

			String machineID = this.getMachinedID();
			releaseSession(session);
			current.set(null);
			session.invalidate();
			// ------------退出时保存用户日志信息
			if(enablelog)
			{
				try {
					LogManager logMgr = SecurityDatabase.getLogManager();
	
					String operContent = userName + "[" + userId + "] 退出["
							+ subsystem + "]";
					String operSource = machineID;
					String operModle = "认证管理";
					logMgr.log(userAccount,orgID,operModle,  operSource,
							operContent ,"", Log.INSERT_OPER_TYPE);		
					
				} catch (SPIException e1) {
					//e1.printStackTrace();
				} catch (ManagerException e) {
					//e.printStackTrace();
				}

			}
			// -------------------


			if(redirected )
			{
				if(redirect == null && redirecttarget == null)
				{
					if(_alt == null)
					{
						redirect();
					}
					else
					{
						redirect(true);
					}
				}
				else
				{
					if(_alt == null)
					{
						redirect(request,response,redirect,redirecttarget);
					}
					else
					{
						redirect(request,response,redirect,redirecttarget,true);
					}
					
				}
			}
		} catch (LoginException ex) {
			log.debug("退出登录失败：" + ex.getMessage());
		}
	}

	/**
	 * 返回用户id
	 * 
	 * @return long
	 */
	public String getUserID() {
		if (credential == null)
			return "";
		Object userID = credential.getCheckCallBack()
				.getUserAttribute("userID");

		return userID == null ? "" : userID.toString();
	}

	/**
	 * 返回用户帐号
	 * 
	 * @return long
	 */
	public String getUserAccount() {
		if (principal != null) {
			String userAccount = this.principal.getName();
			return userAccount == null ? "" : userAccount;
		}
		return "";
	}

	/**
	 * 返回用户真实名称
	 * 
	 * @return long
	 */
	public String getUserName() {
		if (credential == null)
			return "";
		Object userName = credential.getCheckCallBack().getUserAttribute(
				"userName");

		return userName == null ? "" : userName.toString();
	}

	/**
	 * 返回用户所在主机构名称
	 * 
	 * @return long
	 */
	public String getChargeOrgName() {
		if (credential == null)
			return "";
		Organization chargeOrg = (Organization) credential.getCheckCallBack()
				.getUserAttribute("CHARGEORGID");

		return chargeOrg == null ? "" : chargeOrg.getOrgName();
	}

	/**
	 * 返回用户所在主机构id
	 * 
	 * @return long
	 */
	public String getChargeOrgId() {
		if (credential == null)
			return "";
		Organization chargeOrg = (Organization) credential.getCheckCallBack()
				.getUserAttribute("CHARGEORGID");

		return chargeOrg == null ? "" : chargeOrg.getOrgId();
	}

	/**
	 * 获取所在机构编码
	 * 
	 * @return
	 */
	public String getChargeOrgCode() {
		if (credential == null)
			return "";
		Organization chargeOrg = (Organization) credential.getCheckCallBack()
				.getUserAttribute("CHARGEORGID");

		return chargeOrg == null ? "" : chargeOrg.getOrgnumber();
	}

	/**
	 * 获取所在机构编码
	 * 
	 * @return
	 */
	public String getChargeOrgLevel() {
		if (credential == null)
			return "";
		Organization chargeOrg = (Organization) credential.getCheckCallBack()
				.getUserAttribute("CHARGEORGID");

		return chargeOrg == null ? "" : chargeOrg.getOrg_level();
	}

	/**
	 * 获取所在机构编码
	 * 
	 * @return
	 */
	public Organization getChargeOrg() {
		if (credential == null)
			return null;
		Organization chargeOrg = (Organization) credential.getCheckCallBack()
				.getUserAttribute("CHARGEORGID");

		return chargeOrg;
	}

	/**
	 * 返回用户所在全部机构列表(主机构除外)
	 * 
	 * @return List<Organization>
	 */
	public List getAllOrgListExcludeCharge() {
		if (credential == null)
			return new ArrayList();
		List secondOrgs = (List) credential.getCheckCallBack()
				.getUserAttribute("secondOrgs");

		return secondOrgs;
	}

	/**
	 * 判断用户是否是系统管理员
	 * 
	 * @return boolean
	 */

	// public boolean isAdmin()
	// {
	// if(roles == null)
	// {
	// String t_roles = credential.getCheckCallBack().getUserAttribute(
	// "userRoles");
	// if (t_roles != null)
	// this.roles = StringUtil.split("\\,");
	// }
	// for(int i = 0; i < roles.length;i ++)
	// {
	// if(roles[i].equals(ADMINISTRATOR_ROLE))
	// return true;
	// }
	// return false;
	// }
	public Principal getPrincipal() {
		return principal;
	}

	public Credential getCredential() {
		return credential;
	}

	/**
	 * 获取用户当前登录的子系统标识
	 * 
	 * @return
	 */
	public String getCurrentSystem() {
		return FrameworkServlet.getSubSystem(this.request, this.response, this
				.getUserAccount());
	}

	/**
	 * 判断当前用户是否是系统管理员
	 * 
	 * @return boolean
	 */
	public boolean isAdmin() {
		return AppSecurityCollaborator.getInstance().isAdmin(this.principal);
	}

	public static boolean isAdmin(String userAccount) {
		if (userAccount == null)
			return false;
		AuthPrincipal principal = new AuthPrincipal(userAccount, null, null);
		return AppSecurityCollaborator.getInstance().isAdmin(principal);
	}

	public static boolean isAdminByUserid(String userID) {
		if (userID == null)
			return false;

		AuthPrincipal principal = new AuthPrincipal(AccessControl
				.getUserAccountByUserID(userID), null, null);
		return AppSecurityCollaborator.getInstance().isAdmin(principal);
	}

	/**
	 * 判断给定的角色是否是超级管理员角色
	 * 
	 * @param role
	 * @return
	 */
	public static boolean isAdministratorRole(String role) {
		if (role == null)
			return false;
		String administratorRole = AppSecurityCollaborator.getInstance()
				.getAdministratorRoleName();

		return administratorRole.equals(role);
	}

	/**
	 * 判断给定的角色是否是每个人都拥有的角色
	 * 
	 * @param role
	 * @return
	 */
	public static boolean isRoleOfEveryOne(String role) {
		if (role == null)
			return false;
		String roleOfEveryOne = AppSecurityCollaborator.getInstance()
				.getEveryonegrantedRoleName();

		return roleOfEveryOne.equals(role);
	}

	/**
	 * 判断当前用户是否授予给定的角色
	 * 
	 * @param roleName
	 *            String
	 * @return boolean
	 */
	public boolean isGrantedRole(AuthRole role) {
		return AppSecurityCollaborator.getInstance().isCallerInRole(
				new AppAccessContext(ConfigManager.getInstance().getAppName(),
						ConfigManager.getInstance().getModuleName()), role,
				principal);
	}

	/**
	 * 判断当前用户是否授予给定的角色
	 * 
	 * @param roleName
	 *            String
	 * @return boolean
	 */
	public boolean isGrantedRole(String role) {
		AuthRole arole = new AuthRole();
		arole.setRoleName(role);
		return isGrantedRole(arole);
	}

	/**
	 * 获取超级管理员角色名称
	 * 
	 * @return
	 */
	public static String getAdministratorRoleName() {
		return AppSecurityCollaborator.getInstance().getAdministratorRoleName();
	}

	/**
	 * 获取每个人都有的角色名称
	 * 
	 * @return
	 */
	public static String getEveryonegrantedRoleName() {
		return AppSecurityCollaborator.getInstance()
				.getEveryonegrantedRoleName();
	}

	public String getUserAttribute(String userAttribute) {
		try {
			Object value = credential.getCheckCallBack().getUserAttribute(
					userAttribute);
			return value == null ? "" : value.toString();
		} catch (Exception e) {
			return "";
		}
	}

	public Object getUserObjectAttribute(String userAttribute) {
		try {
			Object value = credential.getCheckCallBack().getUserAttribute(
					userAttribute);
			return value;
		} catch (Exception e) {
			return null;
		}
	}

	/**
	 * 判断用户是否登录过
	 * 
	 * @return
	 */
	public boolean isLogin(String userAccount) {
		if (userAccount == null)
			return false;
		if (this.principal == null)
			return false;
		else {
			String login_userAccount = principal.getName();
			return login_userAccount != null
					&& login_userAccount.equals(userAccount);
		}
	}

	public int getLoginUserCount() {
		return onlineUser.getCount();
	}

	public Collection getLoginUsers() {
		return onlineUser.getOnLineUser();
	}

	/**
	 * 判断给定类型的资源在没有授权的情况下是否允许用户访问
	 * 
	 * @param resourceType
	 * @return
	 */
	public boolean allowIfNoRequiredRoles(String resourceType) {
		return AppSecurityCollaborator.getInstance().allowIfNoRequiredRoles(
				resourceType);
	}

	/**
	 * 判断资源操作是否是未受保护的资源操作
	 * 
	 * @param resourceType
	 * @param resourceId
	 * @param operation
	 * @return
	 */
	public static boolean isUnprotected(String resourceId, String operation,
			String resourceType) {
		return AppSecurityCollaborator.getInstance().isUnprotected(resourceId,
				operation, resourceType);
	}

	/**
	 * 判断资源是否是未受保护的资源 true-表示无需授权所有人都能访问该资源的所有操作
	 * false-就要根据方法isUnprotected(String resourceId,String operation,String
	 * resourceType)的返回值来 判断每个操作是否无需授权所有人都能访问该资源操作
	 * 
	 * @param resourceType
	 * @param resourceId
	 * @return
	 */
	public static boolean isUnprotected(String resourceId, String resourceType) {
		return AppSecurityCollaborator.getInstance().isUnprotected(resourceId,
				resourceType);
	}

	/**
	 * 判断资源操作是否是系统管理员独占的资源操作
	 * 
	 * @param resourceType
	 * @param resourceId
	 * @param operation
	 * @return
	 */
	public static boolean isExcluded(String resourceId, String operation,
			String resourceType) {
		return AppSecurityCollaborator.getInstance().isExcluded(resourceId,
				operation, resourceType);
	}

	/**
	 * 判断资源所有操作是否只有超级管理员才能访问，返回： true-表示只有超级管理员才能访问,其他人不能访问
	 * false-就要根据方法isExcluded(String resourceId,String operation,String
	 * resourceType)的返回值来 判断每个操作是否是超级管理员独占的操作
	 * 
	 * @param resourceType
	 * @param resourceId
	 * @param operation
	 * @return
	 */
	public static boolean isExcluded(String resourceId, String resourceType) {
		return AppSecurityCollaborator.getInstance().isExcluded(resourceId,
				resourceType);
	}

	public static AuthRole[] getAllRoleofUser(String userAccount) {
		return AppSecurityCollaborator.getInstance().getAllRoleofUser(
				userAccount);
	}
	
//	/**
//	 * 判别用户是否被授予相关的角色
//	 * @param userAccount
//	 * @return
//	 */
//	public static boolean isGrantRolesContext(String userAccount,String[] roles) {
//		
//		
//		return AccessControl.getAccessControl().isGrantRoles(userAccount,roles);
//	}
//	
//	/**
//	 * 判别用户是否被授予相关的角色
//	 * @param userAccount
//	 * @return
//	 */
//	public static boolean isGrantRolesContext(String[] roles) {
//		
//		return isGrantRolesContext(AccessControl.getAccessControl().getUserAccount(),roles);
//	}
	
	/**
	 * 判别用户是否被授予roles中的所有角色,只要有一个角色没被授予那么返回false，否则返回true
	 * 系统中的普通用户角色，可以不需要授给用户，就会直接拥有该角色
	 * @param userAccount
	 * @return
	 */
	public static boolean isGrantRoles(String userAccount,String[] roles) {
		if(roles == null || roles.length == 0)
			return false;
		AuthRole[] aroles = AppSecurityCollaborator.getInstance().getAllRoleofUser(
				userAccount);
		if(aroles == null || aroles.length == 0)
			return false;
		String everyOneRole = AccessControl.getEveryonegrantedRoleName();
		
		for(int i = 0; i < roles.length ; i ++)
		{
			if(everyOneRole.equals(roles[i]))
				continue;
			boolean flag = false;
			for(int j = 0; j < aroles.length ; j ++)
			{				
				if(aroles[j].getRoleType().equals("role") && aroles[j].getRoleName().equals(roles[i]))
				{
					flag = true;
					break;
				}
			}
			if(!flag)
				return false;
			
		}
		//补充实现
		return true;
	}
	
	/**
	 * 判别当前系统上下文中用户是否被授予roles中的所有角色
	 * @param userAccount
	 * @return
	 */
	public static boolean isGrantRoles(String[] roles) {
		
		return isGrantRoles(AccessControl.getAccessControl().getUserAccount(),roles);
	}
	/**
	 * 判别用户是否被授予roles中的任何一个角色，如果被授予其中的任何一个角色
	 * 那么就返回true，否则返回false
	 * @param userAccount
	 * @return
	 */
	public static boolean isGrantAnyRoles(String userAccount,String[] roles) {
		if(roles == null || roles.length == 0)
			return false;
		AuthRole[] aroles = AppSecurityCollaborator.getInstance().getAllRoleofUser(
				userAccount);
		if(aroles == null || aroles.length == 0)
			return false;
		String everyOneRole = AccessControl.getEveryonegrantedRoleName();
		for(int i = 0;  i < roles.length ; i ++)
		{
			if(everyOneRole.equals(roles[i]))
				return true;
			for(int j = 0;  j < aroles.length ; j ++)
			{
				
				if(aroles[j].getRoleType().equals("role") && aroles[j].getRoleName().equals(roles[i]))
					return true;
			}
			
		}
		//补充实现
		return false;
	}
	
	/**
	 * 判别上下文中会话用户是否被授予roles中的任何一个角色，如果被授予其中的任何一个角色
	 * 那么就返回true，否则返回false
	 * @param userAccount
	 * @return
	 */
	public static boolean isGrantAnyRoles(String[] roles) {
		return isGrantAnyRoles(AccessControl.getAccessControl().getUserAccount(), roles);
	}
	
	

	/**
	 * 判断资源是否已经授过权限
	 * 
	 * @param resource
	 * @param resourceType
	 * @return
	 */
	public static boolean hasGrantedAnyRole(String resource, String resourceType) {
		return AppSecurityCollaborator.getInstance().hasGrantedAnyRole(
				resource, resourceType);
	}

	/**
	 * 判断资源是否已经授过权限
	 * 
	 * @param resource
	 * @param resourceType
	 * @return
	 */
	public static boolean hasGrantedRole(String role, String roleType,
			String resource, String resourceType) {
		return AppSecurityCollaborator.getInstance().hasGrantedRole(role,
				roleType, resource, resourceType);
	}

	/**
	 * 获取拥有特定资源许可操作的用户列表
	 * 
	 * @param resourceid
	 * @param operation
	 * @param resourceType
	 * @return
	 */
	public static AuthUser[] getAllPermissionUsersOfResource(String resourceid,
			String operation, String resourceType) {
		return AppSecurityCollaborator.getInstance()
				.getAllPermissionUsersOfResource(resourceid, operation,
						resourceType);
	}

	/**
	 * 判断当前用户是否是该机构的管理员，考虑递归关系
	 * 
	 * @return
	 */
	public boolean isOrganizationManager(String orgid) {
		boolean tag = false;
		try {
			Organization org = OrgCacheManager.getInstance().getOrganization(
					orgid);
			if (org != null) {
				String path = org.getUniqPath();
				String orgids[] = path.split("/");
				// List managerOrgs =
				// (List)this.getUserObjectAttribute("managerOrgs");

				if (orgids.length > 0) {
					for (int i = 0; i < orgids.length; i++) {
						OrgAdminCache orgAdminCache = OrgAdminCache.getOrgAdminCache();
						List adminList = orgAdminCache
								.getManagersOfOrg(orgids[i]);
						if (adminList.size() > 0) {
							for (int j = 0; j < adminList.size(); j++) {
								User user = new User();
								user = (User) adminList.get(j);
								if (user != null) {
									if (this.getUserID().equals(
											user.getUserId() + "")) {
										tag = true;
									}
								}
							}
						}
					}
				}
			}
		} catch (ManagerException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return tag;
	}

	/**
	 * 判断用户是否是子机构的管理员
	 * 
	 * @return
	 */
	public boolean isSubOrgManager(String parentOrgid) {
		boolean tag = false;
		List adminOrgs = new ArrayList();
		OrgAdminCache orgAdminCache = OrgAdminCache.getOrgAdminCache();
		adminOrgs = orgAdminCache.getManagerOrgsOfUserByID(this.getUserID());
		for (int i = 0; i < adminOrgs.size(); i++) {
			Organization org = (Organization) adminOrgs.get(i);
			if (org != null) {
				String path = org.getUniqPath();
				if (path != null) {
					String orgids[] = path.split("/");
					for (int j = 0; j < orgids.length; j++) {
						if (orgids[j].equals(parentOrgid)) {
							tag = true;
						}
					}
				}
			}
		}
		return tag;
	}

	/**
	 * 判断当前用户是否是该机构的管理员，考虑递归关系
	 * 
	 * @return
	 */
	public static boolean isOrganizationManager(String userid, String orgid) {
		boolean tag = false;
		try {
			Organization org = OrgCacheManager.getInstance().getOrganization(
					orgid);
			if (org != null) {
				String path = org.getUniqPath();
				String orgids[] = path.split("/");
				// List managerOrgs =
				// (List)this.getUserObjectAttribute("managerOrgs");

				if (orgids.length > 0) {
					for (int i = 0; i < orgids.length; i++) {
						OrgAdminCache orgAdminCache = OrgAdminCache.getOrgAdminCache();
						List adminList = orgAdminCache
								.getManagersOfOrg(orgids[i]);
						if (adminList.size() > 0) {
							for (int j = 0; j < adminList.size(); j++) {
								User user = new User();
								user = (User) adminList.get(j);
								if (userid.equals(user.getUserId() + "")) {
									tag = true;
								}
							}
						}
					}
				}
			}
		} catch (ManagerException e) {
			
			e.printStackTrace();
		}
		return tag;
	}

	/**
	 * 判断用户是否是子机构的管理员
	 * 
	 * @return
	 */
	public static boolean isSubOrgManager(String userid, String parentOrgid) {
		boolean tag = false;
		List adminOrgs = new ArrayList();
		OrgAdminCache orgAdminCache = OrgAdminCache.getOrgAdminCache();
		adminOrgs = orgAdminCache.getManagerOrgsOfUserByID(userid);
		for (int i = 0; i < adminOrgs.size(); i++) {
			Organization org = (Organization) adminOrgs.get(i);
			String path = org.getUniqPath();
			String orgids[] = path.split("/");
			for (int j = 0; j < orgids.length; j++) {
				if (orgids[j].equals(parentOrgid)) {
					tag = true;
				}
			}
		}
		return tag;
	}

	/**
	 * 判断当前用户是否是站点管理员
	 * 
	 * @return
	 */
	public boolean isSiteManager() {
		return false;
	}

	/**
	 * 根据机构ID,判断该机构是否业务部门
	 * 
	 * @param orgId
	 * @return boolean true=是业务部门;false=不是业务部门 AccessControl.java
	 * @author: ge.tao
	 */
	public static boolean isBussinessDepartment(String orgId) {
		OrgManager orgManager = null;
		try {
			orgManager = SecurityDatabase.getOrgManager();
			return orgManager.isBussinessDepartment(orgId);
		} catch (SPIException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * 根据用户ID,获取用户的县区局
	 * 
	 * @param userId
	 * @return Organization 县区局机构对象 OrgManager.java
	 * @author: ge.tao
	 */
	public static Organization getUserBelongsCountyDepartment(String userId) {
		OrgManager orgManager = null;
		try {
			orgManager = SecurityDatabase.getOrgManager();
			return orgManager.userBelongsCountyDepartment(userId);
		} catch (SPIException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * 根据用户ID,获取用户的市州局
	 * 
	 * @param userId
	 * @return Organization 市州局机构对象 OrgManager.java
	 * @author: ge.tao
	 */
	public static Organization getUserBelongsCityDepartment(String userId) {
		OrgManager orgManager = null;
		try {
			orgManager = SecurityDatabase.getOrgManager();
			return orgManager.userBelongsCityDepartment(userId);
		} catch (SPIException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * 根据用户ID,获取用户所属的业务部门列表
	 * 
	 * @param userId
	 * @return List<Organization> 业务部门机构对象列表 OrgManager.java
	 * @author: ge.tao
	 */
	public static List getUserBelongsBussinessDepartment(String userId) {
		OrgManager orgManager = null;
		try {
			orgManager = SecurityDatabase.getOrgManager();
			return orgManager.userBelongsBussinessDepartment(userId);
		} catch (SPIException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * 判断当前用户所在的机构是否业务部门
	 * 
	 * @param orgId
	 * @return boolean true=是业务部门;false=不是业务部门 AccessControl.java
	 * @author: ge.tao
	 */
	public boolean isBussinessDepartment() {
		OrgManager orgManager = null;
		try {
			orgManager = SecurityDatabase.getOrgManager();
			return orgManager.isBussinessDepartment(this.getChargeOrgId());
		} catch (SPIException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * 根据当前用户的县区局
	 * 
	 * @param userId
	 * @return Organization 县区局机构对象 OrgManager.java
	 * @author: ge.tao
	 */
	public Organization getUserBelongsCountyDepartment() {
		OrgManager orgManager = null;
		try {
			orgManager = SecurityDatabase.getOrgManager();
			return orgManager.userBelongsCountyDepartment(this.getUserID());
		} catch (SPIException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * 获取当前用户的市州局
	 * 
	 * @param userId
	 * @return Organization 市州局机构对象 OrgManager.java
	 * @author: ge.tao
	 */
	public Organization getUserBelongsCityDepartment() {
		OrgManager orgManager = null;
		try {
			orgManager = SecurityDatabase.getOrgManager();
			return orgManager.userBelongsCityDepartment(this.getUserID());
		} catch (SPIException e) {

			e.printStackTrace();
			return null;
		}
	}

	/**
	 * 获取当前用户的省局
	 * 
	 * @return Organization 省局机构对象 AccessControl.java
	 * @author: ge.tao
	 */
	public Organization getUserBelongsProvinceDepartment() {
		OrgManager orgManager = null;
		try {
			orgManager = SecurityDatabase.getOrgManager();
			return orgManager.userBelongsCityDepartment(this.getUserID());
		} catch (SPIException e) {

			e.printStackTrace();
			return null;
		}
	}

	/**
	 * 根据用户ID,获取用户所属的业务部门列表
	 * 
	 * @return List<Organization> 业务部门机构对象列表 OrgManager.java
	 * @author: ge.tao
	 */
	public List getUserBelongsBussinessDepartment() {
		OrgManager orgManager = null;
		try {
			orgManager = SecurityDatabase.getOrgManager();
			return orgManager.userBelongsBussinessDepartment(this.getUserID());
		} catch (SPIException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * 用户资源授予时根据用户自身角色，岗位角色，自身资源确定用户资源的来源
	 * 
	 * @param userCurOrgId
	 *            用户所在机构ID
	 * @param grantUserId
	 *            被授资源的用户ID
	 * @param grantOrgName
	 *            授予机构资源的机构名称
	 * @param restypeId
	 *            资源类型ID
	 * @param resId
	 *            资源ID
	 * @param opId
	 *            操作ID
	 * @return
	 * @throws ManagerException
	 * @author: gao.tang 2008.1.1
	 */
	public String getUserRes_jobRoleandRoleandSelf(String userCurOrgId,
			String grantUserId, String resName, String restypeId, String resId,
			String opId) throws ManagerException {
		// 批量操作返回空
		String[] userIds = grantUserId.split(",");
		if (userIds.length > 1)
			return "";
		String returnStr = "";
		DBUtil db_role = new DBUtil();

		// 用户岗位,角色拥有的资源
		StringBuffer sql_role = new StringBuffer()
				.append(
						"select t.OP_ID, t.RES_ID, t.ROLE_ID, t.RESTYPE_ID, t.TYPES from td_sm_roleresop t ")
				.append("where t.role_id in (select ojr.role_id ")
				.append("from td_sm_orgjobrole ojr, td_sm_job j ")
				.append(
						" where ojr.job_id in(select job_id from td_sm_userjoborg where user_id = '")
				.append(grantUserId)
				.append("')")
				.append("and org_id = '")
				.append(userCurOrgId)
				.append("' and ojr.job_id = j.job_id ")
				.append(
						"union select role_id from td_sm_userrole where user_id = '")
				.append(grantUserId).append("') ")
				// .append("and res_name = '").append(resName).append("' ")
				.append("and restype_id = '").append(restypeId).append("' ")
				.append("and res_id = '").append(resId).append("' ").append(
						"and op_id = '").append(opId).append(
						"' and types='role' ");
		// 用户自身拥有资源与岗位,角色拥有的资源
		StringBuffer sql_role_self = new StringBuffer()
				.append(sql_role.toString())
				.append(" union ")
				.append(
						"select t.OP_ID, t.RES_ID, t.ROLE_ID, t.RESTYPE_ID, t.TYPES from td_sm_roleresop t ")
				.append("where t.role_id in (").append(
						"select role_id from td_sm_roleresop where role_id='")
				.append(grantUserId).append("') ")
				// .append("and res_name = '").append(resName).append("' ")
				.append("and restype_id = '").append(restypeId).append("' ")
				.append("and res_id = '").append(resId).append("' ").append(
						"and op_id = '").append(opId).append(
						"' and types='user' ");

		try {
			db_role.executeSelect(sql_role.toString());
			if (db_role.size() > 0) {// 大于0，说明用户岗位角色和用户角色拥有该资源
				returnStr = "1";
				DBUtil db_role_self = new DBUtil();
				db_role_self.executeSelect(sql_role_self.toString());
				if (db_role_self.size() >= (db_role.size() + 1)) {// 大于等于(db_role.size()+1)，说明用户自身也有该资源
					returnStr = "2";
				}
			} else {// 用户自身，岗位角色，自身角色都没有该资源
				returnStr = "3";
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return returnStr;
	}

	/**
	 * 取用户对应的资源操作源自的角色列表
	 * 
	 * @param userCurOrgId
	 * @param grantUserId
	 * @param resName
	 * @param restypeId
	 * @param resId
	 * @param opId
	 * @return map<key:op_id,value:roles>
	 * @throws ManagerException
	 * @author: gao.tang 2008.1.2
	 */
	public Map getSourceUserRes_Role(String userCurOrgId,
			String grantUserId, String resName, String restypeId, String resId) throws ManagerException {
		// 批量操作返回空
		String[] userIds = grantUserId.split(",");
		if (userIds.length > 1)
			return null;

//		String returnStr = "";
		
		// 用户自身角色拥有该资源
		StringBuffer sql_selfRole = new StringBuffer().append(
				"select t.op_id,'用户角色【'||a.role_name||'】拥有该资源；' as jobname ").append(
				"from td_sm_roleresop t,td_sm_role a ").append(
				"where t.role_id in ").append(
				"(select role_id from td_sm_userrole where user_id = '")
				.append(grantUserId).append("') ")
				// .append("and res_name = '").append(resName).append("' ")
				.append("and restype_id = '").append(restypeId).append("' ")
				.append("and res_id = '").append(resId).append("' ").append(
						" and a.role_id = t.role_id and t.types = 'role' ");
		// 用户岗位角色拥有该资源
		StringBuffer sql_jobRole = new StringBuffer()
				.append("select a.op_id,'用户岗位'||infos.job_name || '下的角色【' || b.role_name||'】拥有该资源；' as jobname ")
				.append("from (select aa.role_id, aa.job_id, job.job_name ")
				.append("from td_sm_orgjobrole aa, td_sm_userjoborg bb, td_sm_job job ")
				.append("where aa.org_id = bb.org_id and aa.job_id = bb.job_id ")
				.append("and job.job_id = bb.job_id and bb.user_id = '")
				.append(grantUserId)
				.append("') infos, ")
				.append("td_sm_roleresop a,td_sm_role b  where a.role_id = infos.role_id and a.types = 'role' ")
				.append("and a.role_id = b.role_id ")
				.append("and restype_id = '").append(restypeId).append("' ")
				.append("and res_id = '").append(resId).append("' ");
		
		//用户所属机构拥有的资源
		StringBuffer sql_org = new StringBuffer()
			.append("select a.op_id,'来自机构【' || nvl(b.remark5,b.org_name) ||'】；'  as jobname ")
			.append(" from td_sm_roleresop a left join td_sm_organization b on a.role_id = b.org_id ")
			.append(" where a.types='organization' and a.role_id in (select  org_id from td_sm_userjoborg ")
			.append(" where user_id ='").append(grantUserId).append("') and a.restype_id = '")
			.append(restypeId).append("' and a.res_id = '").append(resId).append("' ")
			.append(" union")
			.append(" select a.op_id,'来自【'|| o.remark5 ||'】机构的角色【' || b.role_name || '】；' as jobname ")
			.append(" from td_sm_orgrole c ,td_sm_organization o ,td_sm_roleresop a,td_sm_role b ")
			.append(" where c.org_id=o.org_id and a.role_id=c.role_id and a.types='role' and c.role_id=b.role_id and c.org_id in (")
			.append("select  org_id from td_sm_userjoborg where user_id ='")
			.append(grantUserId).append("') and a.restype_id = '")
			.append(restypeId).append("' and a.res_id = '").append(resId).append("' ");
		
		//用户隶属用户组的资源
		StringBuffer sql_group = new StringBuffer()
			.append(" select  a.op_id,'来自用户组【'||g.group_name||'】对应角色【' || b.role_name || '】；' as jobname")
			.append(" from td_sm_grouprole d , td_sm_group g  ,td_sm_roleresop a,td_sm_role b " +
					"where d.group_id=g.group_id and a.role_id=d.role_id and d.role_id=b.role_id and a.types='role' and d.group_id in (")
			.append(" select  group_id from td_sm_usergroup  where user_id = '")
			.append(grantUserId)
			.append("') and a.restype_id = '")
			.append(restypeId).append("' and a.res_id = '").append(resId).append("' ");

		StringBuffer sql = new StringBuffer().append(sql_selfRole.toString())
				.append(" union ").append(sql_jobRole.toString())
				.append(" union ").append(sql_org.toString())
				.append(" union ").append(sql_group.toString());
		
		DBUtil db = new DBUtil();
		try {
			db.executeSelect(sql.toString());

			Map opMap = new HashMap();

				for (int i = 0; i < db.size(); i++) {
					String key = db.getString(i, "op_id");
					String values = db.getString(i, "jobname");
					String exist = (String)opMap.get(key);
					if(exist==null){
						opMap.put(key, values);
					}else{
						exist +=  values;
						opMap.put(key, exist);
					}
					
				}
			return opMap;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	static final Object token = new Object();
	/**
	 * 角色拥有特定资源类型给定资源操作权限索引
	 * @param roleId
	 * @param resTypeId
	 * @param roleTypeId
	 * @param opId
	 * @return Map<resid,token>
	 */
	public Map getRoleSelfResource(String roleId,String resTypeId,String roleTypeId,String opId){
		String sql1 = "select res_id from td_sm_roleresop where role_id='"
			+  roleId  + "' and restype_id='" + resTypeId + "' and types='" + roleTypeId + "' and op_id='"+opId+"'";
		
		Map checks = new HashMap();
		PreparedDBUtil db1 = new PreparedDBUtil();
		try {
			
			db1.executeSelect(sql1);
			for(int i = 0; i < db1.size(); i ++)
			{
				checks.put(db1.getString(i, "res_id"), token);
			}
			
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return checks;
	}
	
	/**
	 * 获取角色特定拥有的资源类型资源操作权限索引，
	 * @param roleId
	 * @param resTypeId
	 * @param roleTypeId
	 * @param opId
	 * @return Map<resid||opid,token>
	 */
	public Map getRoleSelfResource(String roleId,String resTypeId,String roleTypeId){
		String sql1 = "select res_id,op_id from td_sm_roleresop where role_id='"
			+  roleId  + "' and restype_id='" + resTypeId + "' and types='" + roleTypeId + "' ";
		
		Map checks = new HashMap();
		PreparedDBUtil db1 = new PreparedDBUtil();
		try {
			
			db1.executeSelect(sql1);
			for(int i = 0; i < db1.size(); i ++)
			{
				checks.put(db1.getString(i, "res_id") + "||"+ db1.getString(i, "op_id"), token);
			}
			
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return checks;
	}
	
	/**
	 * 取用户对应的某类资源所有资源的特定操作源自的角色索引列表
	 * 
	 * @param userCurOrgId
	 * @param grantUserId
	 * @param restypeId
	 * @param opId
	 * @return map<key:resId,value:roles>
	 * @throws ManagerException
	 * @author: gao.tang 2008.1.2
	 */
	public Map getSourceUserRes_Role(String userCurOrgId,
			String grantUserId, String restypeId, String opId){
		// 批量操作返回空
		String[] userIds = grantUserId.split(",");
		if (userIds.length > 1)
			return null;

//		String returnStr = "";
		
		// 用户自身角色拥有该资源
		StringBuffer sql_selfRole = new StringBuffer().append(
				"select t.res_id,'用户角色【'||a.role_name||'】拥有该资源；' as jobname ").append(
				"from td_sm_roleresop t,td_sm_role a ").append(
				"where t.role_id in ").append(
				"(select role_id from td_sm_userrole where user_id = '")
				.append(grantUserId).append("') ")
				// .append("and res_name = '").append(resName).append("' ")
				.append("and restype_id = '").append(restypeId).append("' ")
				.append("and op_id = '").append(opId).append("' ").append(
						" and a.role_id = t.role_id and t.types = 'role' ");
		// 用户岗位角色拥有该资源
		StringBuffer sql_jobRole = new StringBuffer()
				.append("select a.res_id,'用户岗位'||infos.job_name || '下的角色【' || b.role_name||'】拥有该资源；' as jobname ")
				.append("from (select aa.role_id, aa.job_id, job.job_name ")
				.append("from td_sm_orgjobrole aa, td_sm_userjoborg bb, td_sm_job job ")
				.append("where aa.org_id = bb.org_id and aa.job_id = bb.job_id ")
				.append("and job.job_id = bb.job_id and bb.user_id = '")
				.append(grantUserId)
				.append("') infos, ")
				.append("td_sm_roleresop a,td_sm_role b  where a.role_id = infos.role_id and a.types = 'role' ")
				.append("and a.role_id = b.role_id ")
				.append("and restype_id = '").append(restypeId).append("' ")
				.append("and op_id = '").append(opId).append("' ");
		
		//用户所属机构拥有的资源
		StringBuffer sql_org = new StringBuffer()
			.append("select a.res_id,'来自机构【' || nvl(b.remark5,b.org_name) ||'】；'  as jobname ")
			.append(" from td_sm_roleresop a left join td_sm_organization b on a.role_id = b.org_id ")
			.append(" where a.types='organization' and a.role_id in (select  org_id from td_sm_userjoborg ")
			.append(" where user_id ='").append(grantUserId).append("') and a.restype_id = '")
			.append(restypeId).append("' and a.op_id = '").append(opId).append("' ")
			.append(" union")
			.append(" select a.res_id,'来自【'|| o.remark5 ||'】机构的角色【' || b.role_name || '】；' as jobname ")
			.append(" from td_sm_orgrole c ,td_sm_organization o ,td_sm_roleresop a,td_sm_role b ")
			.append(" where c.org_id=o.org_id and a.role_id=c.role_id and a.types='role' and c.role_id=b.role_id and c.org_id in (")
			.append("select  org_id from td_sm_userjoborg where user_id ='")
			.append(grantUserId).append("') and a.restype_id = '")
			.append(restypeId).append("' and a.op_id = '").append(opId).append("' ");
		
		//用户隶属用户组的资源
		StringBuffer sql_group = new StringBuffer()
			.append(" select  a.res_id,'来自用户组【'||g.group_name||'】对应角色【' || b.role_name || '】；' as jobname")
			.append(" from td_sm_grouprole d , td_sm_group g  ,td_sm_roleresop a,td_sm_role b " +
					"where d.group_id=g.group_id and a.role_id=d.role_id and d.role_id=b.role_id and a.types='role' and d.group_id in (")
			.append(" select  group_id from td_sm_usergroup  where user_id = '")
			.append(grantUserId)
			.append("') and a.restype_id = '")
			.append(restypeId).append("' and a.op_id = '").append(opId).append("' ");

		StringBuffer sql = new StringBuffer().append(sql_selfRole.toString())
				.append(" union ").append(sql_jobRole.toString())
				.append(" union ").append(sql_org.toString())
				.append(" union ").append(sql_group.toString());
		
		DBUtil db = new DBUtil();
		try {
			db.executeSelect(sql.toString());

			Map opMap = new HashMap();

				for (int i = 0; i < db.size(); i++) {
					String key = db.getString(i, "res_id");
					String values = db.getString(i, "jobname");
					String exist = (String)opMap.get(key);
					if(exist==null){
						opMap.put(key, values);
					}else{
						exist +=  values;
						opMap.put(key, exist);
					}
					
				}
			return opMap;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	/**
	 * 查询出用户已经授予的资源来源
	 * 
	 * @param userCurOrgId
	 * @param grantUserId
	 * @param resName
	 * @param restypeId
	 * @param resId
	 * @param opId
	 * @return
	 * @throws ManagerException
	 * @author: gao.tang 2008.1.2
	 */
	public String getSourceUserRes_jobRoleandRoleandSelf(String userCurOrgId,
			String grantUserId, String resName, String restypeId, String resId,
			String opId) throws ManagerException {
		// 批量操作返回空
		String[] userIds = grantUserId.split(",");
		if (userIds.length > 1)
			return "";

		String returnStr = "";
		// 用户自身拥有该资源
		StringBuffer sql_self = new StringBuffer().append(
				"select '用户自身拥有该资源；' as jobname from td_sm_roleresop t ")
				.append("where t.role_id in (").append(
						"select role_id from td_sm_roleresop where role_id='")
				.append(grantUserId).append("') ")
				// .append("and res_name = '").append(resName).append("' ")
				.append("and restype_id = '").append(restypeId).append("' ")
				.append("and res_id = '").append(resId).append("' ").append(
						"and op_id = '").append(opId).append(
						"' and t.types = 'user' ");
		// 用户自身角色拥有该资源
		StringBuffer sql_selfRole = new StringBuffer().append(
				"select '用户角色【'||a.role_name||'】拥有该资源；' as jobname ").append(
				"from td_sm_roleresop t,td_sm_role a ").append(
				"where t.role_id in ").append(
				"(select role_id from td_sm_userrole where user_id = '")
				.append(grantUserId).append("') ")
				// .append("and res_name = '").append(resName).append("' ")
				.append("and restype_id = '").append(restypeId).append("' ")
				.append("and res_id = '").append(resId).append("' ").append(
						"and op_id = '").append(opId).append("' ").append(
						" and a.role_id = t.role_id and t.types = 'role' ");
		// 用户岗位角色拥有该资源
		StringBuffer sql_jobRole = new StringBuffer()
				.append(
						"select '用户岗位'||infos.job_name || '下的角色【' || b.role_name||'】拥有该资源；' as jobname ")
				.append("from (select aa.role_id, aa.job_id, job.job_name ")
				.append(
						"from td_sm_orgjobrole aa, td_sm_userjoborg bb, td_sm_job job ")
				.append(
						"where aa.org_id = bb.org_id and aa.job_id = bb.job_id ")
				.append("and job.job_id = bb.job_id and bb.user_id = '")
				.append(grantUserId)
				.append("') infos, ")
				.append(
						"td_sm_roleresop a,td_sm_role b  where a.role_id = infos.role_id and a.types = 'role' ")
				.append("and a.role_id = b.role_id ")
				// .append("and res_name = '").append(resName).append("' ")
				.append("and restype_id = '").append(restypeId).append("' ")
				.append("and res_id = '").append(resId).append("' ").append(
						"and op_id = '").append(opId).append("' ");

		StringBuffer sql = new StringBuffer().append(sql_selfRole.toString())
				.append(" union ").append(sql_jobRole.toString()).append(
						" union ").append(sql_self.toString());
		DBUtil db = new DBUtil();
		try {
			db.executeSelect(sql.toString());
			if (db.size() > 0) {
				for (int i = 0; i < db.size(); i++) {
					String jobname = db.getString(i, "jobname");
					returnStr += jobname;
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return returnStr;
	}

	/**
	 * 根据用户登陆名判断登陆用户是否为部门管理员
	 * 
	 * @param userName
	 * @return
	 */
	public static boolean isOrgManager(String userName) {
		boolean state = false;
		DBUtil db = new DBUtil();
		String sql = "select count(b.org_id) from td_sm_user a,td_sm_orgmanager b "
				+ "where a.user_id = b.user_id and a.user_name='"
				+ userName
				+ "'";
		try {
			db.executeSelect(sql);
			if (db.getInt(0, 0) > 0) {
				state = true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return state;
	}

	public static boolean removeUser(String userName) {

		return AccessControl.onlineUser.removeAllUser();

	}

	public static boolean removeAllUser() {

		return AccessControl.onlineUser.removeAllUser();

	}

	public static boolean removeAllUserExcludeSelf(String userName,
			String sessionId, String ip,String macaddr,String DNSName,String serverIp,
	String serverport ) {

		return AccessControl.onlineUser.removeAllUserExcludeSelf(userName,
				sessionId, ip,macaddr,DNSName,serverIp,
				serverport);

	}

	public static boolean removeUsers(String[] selectUserName,
			String curUserName) {
		// session.invalidate();
		return AccessControl.onlineUser
				.removeUsers(selectUserName, curUserName);
	}

	public String getMacAddr() {
		String macaddr =null;
		if(session != null)
			macaddr = (String)this.session.getAttribute(AccessControl.MACADDR_CACHE_KEY);
		if(macaddr == null)
			return "";
		return macaddr;
	}
	
	public static LineUser getLineUser(String userAccount)
	{
		return onlineUser.getLineUser(userAccount);
	}
	
	//转换异常信息中的 \\n,\\r 
	public static String formatErrorMsg(String errorMessage){
		if(errorMessage != null)
        {
        	errorMessage = errorMessage.replaceAll("\\n","\\\\n");
        	errorMessage = errorMessage.replaceAll("\\r","\\\\r");
        }
		return errorMessage;
	}
	
	/**
     * 清除角色和资源操作的缓冲关系
     */
	public static void resetPermissionCache(){
		AppSecurityCollaborator.getInstance().resetPermissionCache();
	}
	
	/**
     * 清除用户和角色的缓冲关系
     */
	public static void resetAuthCache(){
		AppSecurityCollaborator.getInstance().resetAuthCache();
	}
}
