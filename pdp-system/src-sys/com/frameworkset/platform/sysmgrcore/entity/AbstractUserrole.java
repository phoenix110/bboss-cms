/*
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized
 * by MyEclipse Hibernate tool integration.
 *
 * Created Wed Feb 08 15:38:36 CST 2006 by MyEclipse Hibernate Tool.
 */
package com.frameworkset.platform.sysmgrcore.entity;

import java.io.Serializable;

/**
 * A class that represents a row in the td_sm_userrole table. You can customize
 * the behavior of this class by editing the class, {@link Userrole()}.
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized *
 * by MyEclipse Hibernate tool integration.
 */
public abstract class AbstractUserrole implements Serializable {
    /**
     * The cached hash code value for this instance. Settting to 0 triggers
     * re-calculation.
     */
    private int hashValue = 0;

    /** The simple primary key value. */
    private UserroleKey id = new UserroleKey();

    /**
     * 用户角色实体所关联的用户实体
     */
    private User user = null;

    /**
     * 用户角色实体所关联的角色实体
     */
    private Role role = null;

    /**
     * @return 返回 role。
     */
    public Role getRole() {
        return role;
    }

    /**
     * @param role
     *            要设置的 role。
     */
    public void setRole(Role role) {
        this.role = role;
        
        if (id.getRoleId() == null && role != null)
            id.setRoleId(role.getRoleId());
    }

    /**
     * @return 返回 user。
     */
    public User getUser() {
        return user;
    }

    /**
     * @param user
     *            要设置的 user。
     */
    public void setUser(User user) {
        this.user = user;
        
        if (id.getUserId() == null && user != null)
            id.setUserId(user.getUserId());
    }

    /**
     * Simple constructor of AbstractUserrole instances.
     */
    public AbstractUserrole() {
    }

    /**
     * Constructor of AbstractUserrole instances given a composite primary
     * key.
     * 
     * @param id
     */
    public AbstractUserrole(UserroleKey id) {
        this.setId(id);
    }

    /**
     * Return the composite id instance that identifies this object.
     * 
     * @return UserroleKey
     */
    public UserroleKey getId() {
        return this.id;
    }

    /**
     * Set the composite id instance that identifies this object.
     * 
     * @param id
     */
    public void setId(UserroleKey id) {
        this.hashValue = 0;
        this.id = id;
    }

    /**
     * Implementation of the equals comparison on the basis of equality of the
     * primary key values.
     * 
     * @param rhs
     * @return boolean
     */
    public boolean equals(Object rhs) {
        if (rhs == null)
            return false;
        if (!(rhs instanceof Userrole))
            return false;
        Userrole that = (Userrole) rhs;
        if (this.getId() != null && that.getId() != null) {
            return (this.getId().equals(that.getId()));
        }
        return true;
    }

    /**
     * Implementation of the hashCode method conforming to the Bloch pattern
     * with the exception of array properties (these are very unlikely primary
     * key types).
     * 
     * @return int
     */
    public int hashCode() {
        if (this.hashValue == 0) {
            int result = 17;
            if (this.getId() == null) {
                result = super.hashCode();
            } else {
                result = this.getId().hashCode();
            }
            this.hashValue = result;
        }
        return this.hashValue;
    }
}